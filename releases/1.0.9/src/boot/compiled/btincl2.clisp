 
; )package "BOOTTRAN"
 
(IN-PACKAGE "BOOTTRAN")
 
; bStreamNil:=["nullstream"]
 
(EVAL-WHEN (EVAL LOAD) (SETQ |bStreamNil| (LIST '|nullstream|)))
 
; shoeFileMap(f, fn)==
;      a:=shoeInputFile fn
;      null a =>
;         shoeConsole CONCAT(fn,'" NOT FOUND")
;         bStreamNil
;      shoeConsole CONCAT('"READING ",fn)
;      shoeInclude  bAddLineNumber(bMap(f,bRgen a),bIgen 0)
 
(DEFUN |shoeFileMap| (|f| |fn|)
  (PROG (|a|)
    (RETURN
      (PROGN
        (SETQ |a| (|shoeInputFile| |fn|))
        (COND
          ((NULL |a|)
           (PROGN
             (|shoeConsole| (CONCAT |fn| " NOT FOUND"))
             |bStreamNil|))
          ('T
           (PROGN
             (|shoeConsole| (CONCAT "READING " |fn|))
             (|shoeInclude|
                 (|bAddLineNumber| (|bMap| |f| (|bRgen| |a|))
                     (|bIgen| 0))))))))))
 
; shoeFileInput fn==shoeFileMap(function IDENTITY,fn)
 
(DEFUN |shoeFileInput| (|fn|)
  (PROG () (RETURN (|shoeFileMap| #'IDENTITY |fn|))))
 
; shoePrefixLisp x== CONCAT('")lisp",x)
 
(DEFUN |shoePrefixLisp| (|x|) (PROG () (RETURN (CONCAT ")lisp" |x|))))
 
; shoeLispFileInput fn== shoeFileMap(function shoePrefixLisp,fn)
 
(DEFUN |shoeLispFileInput| (|fn|)
  (PROG () (RETURN (|shoeFileMap| #'|shoePrefixLisp| |fn|))))
 
; shoePrefixLine x== CONCAT('")line",x)
 
(DEFUN |shoePrefixLine| (|x|) (PROG () (RETURN (CONCAT ")line" |x|))))
 
; shoeLineFileInput fn== shoeFileMap(function shoePrefixLine,fn)
 
(DEFUN |shoeLineFileInput| (|fn|)
  (PROG () (RETURN (|shoeFileMap| #'|shoePrefixLine| |fn|))))
 
; shoePrefix?(prefix,whole) ==
;      #prefix > #whole => false
;      good:=true
;      for i in 0..#prefix-1 for j in 0.. while good repeat
;                 good:= prefix.i = whole.j
;      if good then SUBSTRING(whole,#prefix,nil) else good
 
(DEFUN |shoePrefix?| (|prefix| |whole|)
  (PROG (|good|)
    (RETURN
      (COND
        ((< (LENGTH |whole|) (LENGTH |prefix|)) NIL)
        ('T
         (PROGN
           (SETQ |good| T)
           ((LAMBDA (|bfVar#1| |i| |j|)
              (LOOP
                (COND
                  ((OR (> |i| |bfVar#1|) (NOT |good|)) (RETURN NIL))
                  ('T
                   (SETQ |good|
                         (EQUAL (ELT |prefix| |i|) (ELT |whole| |j|)))))
                (SETQ |i| (+ |i| 1))
                (SETQ |j| (+ |j| 1))))
            (- (LENGTH |prefix|) 1) 0 0)
           (COND
             (|good| (SUBSTRING |whole| (LENGTH |prefix|) NIL))
             ('T |good|))))))))
 
; shoePlainLine?(s) ==
;          #s = 0 =>  true
;          s.0 ^= char ")"
 
(DEFUN |shoePlainLine?| (|s|)
  (PROG ()
    (RETURN
      (COND
        ((EQL (LENGTH |s|) 0) T)
        ('T (NOT (EQUAL (ELT |s| 0) (|char| '|)|))))))))
 
; shoeSay?          s  == shoePrefix?('")say",         s)
 
(DEFUN |shoeSay?| (|s|) (PROG () (RETURN (|shoePrefix?| ")say" |s|))))
 
; shoeEval?         s  == shoePrefix?('")eval",        s)
 
(DEFUN |shoeEval?| (|s|)
  (PROG () (RETURN (|shoePrefix?| ")eval" |s|))))
 
; shoeInclude?      s  == shoePrefix?('")include",     s)
 
(DEFUN |shoeInclude?| (|s|)
  (PROG () (RETURN (|shoePrefix?| ")include" |s|))))
 
; shoeFin?          s  == shoePrefix?('")fin",         s)
 
(DEFUN |shoeFin?| (|s|) (PROG () (RETURN (|shoePrefix?| ")fin" |s|))))
 
; shoeIf?           s  == shoePrefix?('")if",          s)
 
(DEFUN |shoeIf?| (|s|) (PROG () (RETURN (|shoePrefix?| ")if" |s|))))
 
; shoeEndIf?        s  == shoePrefix?('")endif",       s)
 
(DEFUN |shoeEndIf?| (|s|)
  (PROG () (RETURN (|shoePrefix?| ")endif" |s|))))
 
; shoeElse?         s  == shoePrefix?('")else",        s)
 
(DEFUN |shoeElse?| (|s|)
  (PROG () (RETURN (|shoePrefix?| ")else" |s|))))
 
; shoeElseIf?       s  == shoePrefix?('")elseif",      s)
 
(DEFUN |shoeElseIf?| (|s|)
  (PROG () (RETURN (|shoePrefix?| ")elseif" |s|))))
 
; shoePackage?      s  == shoePrefix?('")package",     s)
 
(DEFUN |shoePackage?| (|s|)
  (PROG () (RETURN (|shoePrefix?| ")package" |s|))))
 
; shoeLisp?         s  == shoePrefix?('")lisp",        s)
 
(DEFUN |shoeLisp?| (|s|)
  (PROG () (RETURN (|shoePrefix?| ")lisp" |s|))))
 
; shoeIncludeLisp?  s  == shoePrefix?('")includelisp" ,s)
 
(DEFUN |shoeIncludeLisp?| (|s|)
  (PROG () (RETURN (|shoePrefix?| ")includelisp" |s|))))
 
; shoeLine?         s  == shoePrefix?('")line",        s)
 
(DEFUN |shoeLine?| (|s|)
  (PROG () (RETURN (|shoePrefix?| ")line" |s|))))
 
; shoeIncludeLines? s  == shoePrefix?('")includelines",s)
 
(DEFUN |shoeIncludeLines?| (|s|)
  (PROG () (RETURN (|shoePrefix?| ")includelines" |s|))))
 
; shoeIncludeFunction? s  == shoePrefix?('")includefunction",s)
 
(DEFUN |shoeIncludeFunction?| (|s|)
  (PROG () (RETURN (|shoePrefix?| ")includefunction" |s|))))
 
; shoeBiteOff x==
;          n:=STRPOSL('" ",x,0,true)
;          null n =>  false
;          n1:=STRPOSL ('" ",x,n,nil)
;          null n1 =>  [SUBSTRING(x,n,nil),'""]
;          [SUBSTRING(x,n,n1-n),SUBSTRING(x,n1,nil)]
 
(DEFUN |shoeBiteOff| (|x|)
  (PROG (|n1| |n|)
    (RETURN
      (PROGN
        (SETQ |n| (STRPOSL " " |x| 0 T))
        (COND
          ((NULL |n|) NIL)
          (#0='T
           (PROGN
             (SETQ |n1| (STRPOSL " " |x| |n| NIL))
             (COND
               ((NULL |n1|) (LIST (SUBSTRING |x| |n| NIL) ""))
               (#0#
                (LIST (SUBSTRING |x| |n| (- |n1| |n|))
                      (SUBSTRING |x| |n1| NIL)))))))))))
 
; shoeFileName x==
;          a:=shoeBiteOff x
;          null a =>  '""
;          c:=shoeBiteOff CADR a
;          null c =>  CAR a
;          CONCAT(CAR a,'".",CAR c)
 
(DEFUN |shoeFileName| (|x|)
  (PROG (|c| |a|)
    (RETURN
      (PROGN
        (SETQ |a| (|shoeBiteOff| |x|))
        (COND
          ((NULL |a|) "")
          (#0='T
           (PROGN
             (SETQ |c| (|shoeBiteOff| (CADR |a|)))
             (COND
               ((NULL |c|) (CAR |a|))
               (#0# (CONCAT (CAR |a|) "." (CAR |c|)))))))))))
 
; shoeFnFileName x==
;          a:=shoeBiteOff x
;          null a =>  ['"",'""]
;          c:=shoeFileName CADR a
;          null c =>  [CAR a,'""]
;          [CAR a, c]
 
(DEFUN |shoeFnFileName| (|x|)
  (PROG (|c| |a|)
    (RETURN
      (PROGN
        (SETQ |a| (|shoeBiteOff| |x|))
        (COND
          ((NULL |a|) (LIST "" ""))
          (#0='T
           (PROGN
             (SETQ |c| (|shoeFileName| (CADR |a|)))
             (COND
               ((NULL |c|) (LIST (CAR |a|) ""))
               (#0# (LIST (CAR |a|) |c|))))))))))
 
; shoeFunctionFileInput [fun,fn]==
;     shoeOpenInputFile (a,fn,
;      shoeInclude bAddLineNumber( shoeFindLines(fn,fun,a),bIgen 0))
 
(DEFUN |shoeFunctionFileInput| (|bfVar#2|)
  (PROG (|fn| |fun|)
    (RETURN
      (PROGN
        (SETQ |fun| (CAR |bfVar#2|))
        (SETQ |fn| (CADR |bfVar#2|))
        (|shoeOpenInputFile| |a| |fn|
            (|shoeInclude|
                (|bAddLineNumber| (|shoeFindLines| |fn| |fun| |a|)
                    (|bIgen| 0))))))))
 
; shoeInclude s== bDelay(function shoeInclude1,[s])
 
(DEFUN |shoeInclude| (|s|)
  (PROG () (RETURN (|bDelay| #'|shoeInclude1| (LIST |s|)))))
 
; shoeInclude1 s==
;       bStreamNull s=> s
;       [h,:t]  :=s
;       string  :=CAR h
;       command :=shoeFin? string  => bStreamNil
;       command :=shoeIf? string   => shoeThen([true],[STTOMC command],t)
;       bAppend(shoeSimpleLine h,shoeInclude t)
 
(DEFUN |shoeInclude1| (|s|)
  (PROG (|command| |string| |t| |h|)
    (RETURN
      (COND
        ((|bStreamNull| |s|) |s|)
        (#0='T
         (PROGN
           (SETQ |h| (CAR |s|))
           (SETQ |t| (CDR |s|))
           (SETQ |string| (CAR |h|))
           (COND
             ((SETQ |command| (|shoeFin?| |string|)) |bStreamNil|)
             ((SETQ |command| (|shoeIf?| |string|))
              (|shoeThen| (LIST T) (LIST (STTOMC |command|)) |t|))
             (#0#
              (|bAppend| (|shoeSimpleLine| |h|) (|shoeInclude| |t|))))))))))
 
; shoeSimpleLine(h) ==
;       string  :=CAR h
;       shoePlainLine? string=> [h]
;       command:=shoeLisp? string => [h]
;       command:=shoeIncludeLisp? string =>
;                   shoeLispFileInput shoeFileName command
;       command:=shoeIncludeFunction? string =>
;                   shoeFunctionFileInput shoeFnFileName command
;       command:=shoeLine? string => [h]
;       command:=shoeIncludeLines? string =>
;                   shoeLineFileInput shoeFileName command
;       command:=shoeInclude? string => shoeFileInput shoeFileName command
;       command:=shoePackage? string => [h]
;       command:=shoeSay? string =>
;                 shoeConsole command
;                 nil
;       command:=shoeEval? string =>
;                 STTOMC command
;                 nil
;       shoeLineSyntaxError(h)
;       nil
 
(DEFUN |shoeSimpleLine| (|h|)
  (PROG (|command| |string|)
    (RETURN
      (PROGN
        (SETQ |string| (CAR |h|))
        (COND
          ((|shoePlainLine?| |string|) (LIST |h|))
          ((SETQ |command| (|shoeLisp?| |string|)) (LIST |h|))
          ((SETQ |command| (|shoeIncludeLisp?| |string|))
           (|shoeLispFileInput| (|shoeFileName| |command|)))
          ((SETQ |command| (|shoeIncludeFunction?| |string|))
           (|shoeFunctionFileInput| (|shoeFnFileName| |command|)))
          ((SETQ |command| (|shoeLine?| |string|)) (LIST |h|))
          ((SETQ |command| (|shoeIncludeLines?| |string|))
           (|shoeLineFileInput| (|shoeFileName| |command|)))
          ((SETQ |command| (|shoeInclude?| |string|))
           (|shoeFileInput| (|shoeFileName| |command|)))
          ((SETQ |command| (|shoePackage?| |string|)) (LIST |h|))
          ((SETQ |command| (|shoeSay?| |string|))
           (PROGN (|shoeConsole| |command|) NIL))
          ((SETQ |command| (|shoeEval?| |string|))
           (PROGN (STTOMC |command|) NIL))
          ('T (PROGN (|shoeLineSyntaxError| |h|) NIL)))))))
 
; shoeThen(keep,b,s)== bDelay(function shoeThen1,[keep,b,s])
 
(DEFUN |shoeThen| (|keep| |b| |s|)
  (PROG () (RETURN (|bDelay| #'|shoeThen1| (LIST |keep| |b| |s|)))))
 
; shoeThen1(keep,b,s)==
;     bPremStreamNull s=> s
;     [h,:t]  :=s
;     string  :=CAR h
;     command :=shoeFin? string  => bPremStreamNil(h)
;     keep1:= car keep
;     b1   := car b
;     command :=shoeIf? string  =>
;       keep1 and b1=>  shoeThen(cons(true,keep),cons(STTOMC command,b),t)
;       shoeThen(cons(false,keep),cons(false,b),t)
;     command :=shoeElseIf? string=>
;       keep1 and not b1=>
;           shoeThen(cons(true,rest keep),cons(STTOMC command,rest b),t)
;       shoeThen(cons(false,rest keep),cons(false,rest b),t)
;     command :=shoeElse? string =>
;      keep1 and not b1=>shoeElse(cons(true,rest keep),cons(true,rest b),t)
;      shoeElse(cons(false,rest keep),cons(false,rest b),t)
;     command :=shoeEndIf? string=>
;          null cdr b=>  shoeInclude t
;          shoeThen(rest keep,rest b,t)
;     keep1 and b1 => bAppend(shoeSimpleLine h,shoeThen(keep,b,t))
;     shoeThen(keep,b,t)
 
(DEFUN |shoeThen1| (|keep| |b| |s|)
  (PROG (|b1| |keep1| |command| |string| |t| |h|)
    (RETURN
      (COND
        ((|bPremStreamNull| |s|) |s|)
        (#0='T
         (PROGN
           (SETQ |h| (CAR |s|))
           (SETQ |t| (CDR |s|))
           (SETQ |string| (CAR |h|))
           (COND
             ((SETQ |command| (|shoeFin?| |string|))
              (|bPremStreamNil| |h|))
             (#0#
              (PROGN
                (SETQ |keep1| (CAR |keep|))
                (SETQ |b1| (CAR |b|))
                (COND
                  ((SETQ |command| (|shoeIf?| |string|))
                   (COND
                     ((AND |keep1| |b1|)
                      (|shoeThen| (CONS T |keep|)
                          (CONS (STTOMC |command|) |b|) |t|))
                     (#0#
                      (|shoeThen| (CONS NIL |keep|) (CONS NIL |b|) |t|))))
                  ((SETQ |command| (|shoeElseIf?| |string|))
                   (COND
                     ((AND |keep1| (NULL |b1|))
                      (|shoeThen| (CONS T (CDR |keep|))
                          (CONS (STTOMC |command|) (CDR |b|)) |t|))
                     (#0#
                      (|shoeThen| (CONS NIL (CDR |keep|))
                          (CONS NIL (CDR |b|)) |t|))))
                  ((SETQ |command| (|shoeElse?| |string|))
                   (COND
                     ((AND |keep1| (NULL |b1|))
                      (|shoeElse| (CONS T (CDR |keep|))
                          (CONS T (CDR |b|)) |t|))
                     (#0#
                      (|shoeElse| (CONS NIL (CDR |keep|))
                          (CONS NIL (CDR |b|)) |t|))))
                  ((SETQ |command| (|shoeEndIf?| |string|))
                   (COND
                     ((NULL (CDR |b|)) (|shoeInclude| |t|))
                     (#0# (|shoeThen| (CDR |keep|) (CDR |b|) |t|))))
                  ((AND |keep1| |b1|)
                   (|bAppend| (|shoeSimpleLine| |h|)
                       (|shoeThen| |keep| |b| |t|)))
                  (#0# (|shoeThen| |keep| |b| |t|))))))))))))
 
; shoeElse(keep,b,s)== bDelay(function shoeElse1,[keep,b,s])
 
(DEFUN |shoeElse| (|keep| |b| |s|)
  (PROG () (RETURN (|bDelay| #'|shoeElse1| (LIST |keep| |b| |s|)))))
 
; shoeElse1(keep,b,s)==
;     bPremStreamNull s=> s
;     [h,:t]  :=s
;     string  :=CAR h
;     command :=shoeFin? string => bPremStreamNil(h)
;     b1:=car b
;     keep1:=car keep
;     command :=shoeIf? string=>
;       keep1 and b1=> shoeThen(cons(true,keep),cons(STTOMC command,b),t)
;       shoeThen(cons(false,keep),cons(false,b),t)
;     command :=shoeEndIf? string =>
;          null cdr b=>  shoeInclude t
;          shoeThen(rest keep,rest b,t)
;     keep1 and b1 => bAppend(shoeSimpleLine h,shoeElse(keep,b,t))
;     shoeElse(keep,b,t)
 
(DEFUN |shoeElse1| (|keep| |b| |s|)
  (PROG (|keep1| |b1| |command| |string| |t| |h|)
    (RETURN
      (COND
        ((|bPremStreamNull| |s|) |s|)
        (#0='T
         (PROGN
           (SETQ |h| (CAR |s|))
           (SETQ |t| (CDR |s|))
           (SETQ |string| (CAR |h|))
           (COND
             ((SETQ |command| (|shoeFin?| |string|))
              (|bPremStreamNil| |h|))
             (#0#
              (PROGN
                (SETQ |b1| (CAR |b|))
                (SETQ |keep1| (CAR |keep|))
                (COND
                  ((SETQ |command| (|shoeIf?| |string|))
                   (COND
                     ((AND |keep1| |b1|)
                      (|shoeThen| (CONS T |keep|)
                          (CONS (STTOMC |command|) |b|) |t|))
                     (#0#
                      (|shoeThen| (CONS NIL |keep|) (CONS NIL |b|) |t|))))
                  ((SETQ |command| (|shoeEndIf?| |string|))
                   (COND
                     ((NULL (CDR |b|)) (|shoeInclude| |t|))
                     (#0# (|shoeThen| (CDR |keep|) (CDR |b|) |t|))))
                  ((AND |keep1| |b1|)
                   (|bAppend| (|shoeSimpleLine| |h|)
                       (|shoeElse| |keep| |b| |t|)))
                  (#0# (|shoeElse| |keep| |b| |t|))))))))))))
 
; shoeLineSyntaxError(h)==
;      shoeConsole CONCAT('"INCLUSION SYNTAX ERROR IN LINE ",
;                                 STRINGIMAGE CDR h)
;      shoeConsole car h
;      shoeConsole '"LINE IGNORED"
 
(DEFUN |shoeLineSyntaxError| (|h|)
  (PROG ()
    (RETURN
      (PROGN
        (|shoeConsole|
            (CONCAT "INCLUSION SYNTAX ERROR IN LINE "
                    (STRINGIMAGE (CDR |h|))))
        (|shoeConsole| (CAR |h|))
        (|shoeConsole| "LINE IGNORED")))))
 
; bPremStreamNil(h)==
;        shoeConsole CONCAT('"UNEXPECTED )fin IN LINE ",STRINGIMAGE CDR h)
;        shoeConsole car h
;        shoeConsole '"REST OF FILE IGNORED"
;        bStreamNil
 
(DEFUN |bPremStreamNil| (|h|)
  (PROG ()
    (RETURN
      (PROGN
        (|shoeConsole|
            (CONCAT "UNEXPECTED )fin IN LINE " (STRINGIMAGE (CDR |h|))))
        (|shoeConsole| (CAR |h|))
        (|shoeConsole| "REST OF FILE IGNORED")
        |bStreamNil|))))
 
; bPremStreamNull(s)==
;      if bStreamNull s
;      then
;         shoeConsole '"FILE TERMINATED BEFORE )endif"
;         true
;      else false
 
(DEFUN |bPremStreamNull| (|s|)
  (PROG ()
    (RETURN
      (COND
        ((|bStreamNull| |s|)
         (|shoeConsole| "FILE TERMINATED BEFORE )endif") T)
        ('T NIL)))))
