)set break resume
)expose UnittestCount UnittestAux Unittest

testsuite "integ"

testIntegrate(f: String, x: String, issue: String): Void ==
    testcaseNoClear("integrate(" f ", " x ") (" issue ")")
    testTrue("(res := integrate(" f ", " x "); true)")
    testTrue("not is?(operator first kernels res, 'integral)")
    testEquals("normalize(D(res, " x ") - (" f "))", "0")

xf1testIntegrate(f: String, x: String, issue: String): Void ==
    testcaseNoClear("integrate(" f ", " x ") (" issue ")")
    xftestTrue("(res := integrate(" f ", " x "); true)")
    testTrue("not is?(operator first kernels res, 'integral)")
    testEquals("normalize(D(res, " x ") - (" f "))", "0")

xf2testIntegrate(f: String, x: String, issue: String): Void ==
    testcaseNoClear("integrate(" f ", " x ") (" issue ")")
    testTrue("(res := integrate(" f ", " x "); true)")
    xftestTrue("not is?(operator first kernels res, 'integral)")
    testEquals("normalize(D(res, " x ") - (" f "))", "0")

testIntegrate("sqrt(1+tan(x)^2)", "x", "#436")
xf1testIntegrate("1/(-3+v^3)*v/(-4+v^3)^(1/2)", "v", "#360")
testIntegrate("log(1-z^3)*(%i*z)^(1/2)", "z", "#440")

-- xf2testIntegrate("csc(z)*(1-1/(%i*z)^(1/2))^(1/2)", "z", "#442")
testcaseNoClear("csc(z)*(1-1/(%i*z)^(1/2))^(1/2)")
testTrue("(res := integrate(csc(z)*(1-1/(%i*z)^(1/2))^(1/2), z); true)")
xftestTrue("not is?(operator first kernels res, 'integral)")
xftestEquals("normalize(D(res, z) - csc(z)*(1-1/(%i*z)^(1/2))^(1/2))", "0")

testIntegrate("asin(x/a)", "x", " ")

-- sanity checks
testIntegrate("(x+1)*exp(x)", "x", "rde")
testIntegrate("((x^2+x+1)*exp(1/(x+1)))/(x^2+2*x+1)", "x", "rde")
testIntegrate("((x^3-x^2-3*x+1)*exp(1/(x^2-1)))/(x^3-x^2-x+1)", "x", "rde")
testIntegrate("x*exp(-log(x) + x)", "x", "rde")
testIntegrate("x*exp(log(x) + x)", "x", "rde")
testIntegrate("sinh(b*log(c*x^n) + a)^2", "x", "rde")

-- used to fail due to wrong normalization
testIntegrate("1/x*(exp(log(x)/2+x))^2", "x", "rde")
testIntegrate("exp(x)*exp(exp(x) + 1 + log(exp(x) + 3)/2)^2/(exp(x) + 3)",
               "x", "rde")

-- just a few easy examples
testIntegrate("(x^3-x^2-3*x+1)*exp(1/(x^2-1))/(x^3-x^2-x+1)", "x", "rde")
testIntegrate("((x + 1)*log(x)^2 - 1)*exp(x + 1/log(x))/log(x)^2", "x", "rde")
testIntegrate("((3*x+1)*log(x)+3*x^2+4*x+3)*exp(x+log(x)/3)/x", "x", "rde")
testIntegrate("(3*x^2+5*x)*exp(x + log(x^2-1)/3)/(x+1)", "x", "rde")
testIntegrate("((3*x+1)*log(x)+3*x^2-2*x-3)*exp(x+log(x)/3)/(x*log(x)^2+2*x^2*log(x)+x^3)", "x", "rde")
testIntegrate("(2*log(x)^2+3*x*log(x)+x^2-x-1)*exp(log(x)^2+x)/(x*log(x)^2+2*x^2*log(x)+x^3)", "x", "rde")
testIntegrate("(2*log(x)^2+3*x*log(x)+x^2+x+1)*exp(log(x)^2+x)/x", "x", "rde")
testIntegrate("((x-3)*log(x)+4*x^2)*exp(1/x+log(x)/3)/x^2", "x", "rde")

testIntegrate("1/log(x)", "x", "li")
testIntegrate("1/(log(x) + 1)", "x", "li")
testIntegrate("1/(log(x)^2-1)", "x", "li")
testIntegrate("x/log(x)", "x", "li")
testIntegrate("x/(log(x)+1)", "x", "li")
testIntegrate("(x+1)/(x*log(x))", "x", "li")
testIntegrate("(x+1)/(x*log(log(x) + x))", "x", "li")
testIntegrate("(3*x^2+2)/log(x^3+2*x+1)", "x", "li")
testIntegrate("((x + 1)*log(x) + x^2  + x)/(x*log(log(x) + x))", "x", "li")
testIntegrate("((x + 1)*log(x) + x^2  - 1)/(x*log(log(x) + x))", "x", "li")
testIntegrate("((x+1)*exp(x))/log(x*exp(x))", "x", "li")
-- the same, but written in a different way
testIntegrate("((x+1)*exp(x))/(x + log(x))", "x", "li")
testIntegrate("((2*x+2)*exp(x)*log(x)+(2*x^2+2*x)*exp(x))/(log(x)^2+2*x*log(x)+x^2-2)", "x", "li")
testIntegrate("exp(x)/log(exp(x)+1)", "x", "li")
testIntegrate("(2*exp(x)^2+exp(x))/log(exp(x)^2+exp(x))", "x", "li")
-- the same, but written in a different way
testIntegrate("(2*exp(x)^2+exp(x))/(x + log(exp(x) + 1))", "x", "li")
xf2testIntegrate("(4*x^6-14*x^5-8*x^4-16*x^3-12*x^2-2*x)/((x^4-8*x^3+24*x^2-32*x+16)*log((x^4+2*x^2+1)/(x^2-4*x+4)))", "x", "li")
-- the same, but written in a different way
testIntegrate("(4*x^6-14*x^5-8*x^4-16*x^3-12*x^2-2*x)/((x^4-8*x^3+24*x^2-32*x+16)*2*log((x^2+1)/(x-2)))", "x", "li")
testIntegrate("(-2*x^8+8*x^7-4*x^6+23*x^5+10*x^4-11*x^3+54*x^2-12*x-6)/((x^7-6*x^6+14*x^5-20*x^4+25*x^3-22*x^2+12*x-8)*log((x-2)/(x^2+1)))", "x", "li")
-- polylog
testIntegrate("x/(exp(x) - 1)", "x", "poly")
testIntegrate("x^2/(exp(x) - 1)", "x", "poly")
testIntegrate("x^3/(exp(x) - 1)", "x", "poly")
testIntegrate("2*x*exp(x)/(exp(x)^2 - 1)", "x", "poly")
testIntegrate("x/(exp(x) - 2)", "x", "poly")
testIntegrate("(2*x*exp(x) - 3*x)/(exp(x)^2 -3*exp(x) + 2)", "x", "poly")
testIntegrate("2*x*exp(x)/(exp(x)^2 - 2)", "x", "poly")
testIntegrate("((x+1)*log(x)+(x^2+x))/(x*exp(log(x)+x) - x)", "x", "poly")
-- the same, but written in a different way
xf2testIntegrate("((x+1)*log(x)+(x^2+x))/(x^2*exp(x) - x)", "x", "poly")
testIntegrate("x/(c+b*%e^(d*x)+a*%e^(2*d*x))", "x", "poly")
testIntegrate("((-4*x-8)*log(x)+(-2*x^2-4*x))/(3*x*exp(2*log(x)+x)^2-x)", "x", "poly")
-- the same, but written in a different way
testIntegrate("((-4*x-8)*log(x)+(-2*x^2-4*x))/(3*x^3*exp(log(x)+x)^2-x)", "x", "poly")
testIntegrate("((8*x+16)*log(x)^2+(8*x^2+18*x+4)*log(x)+(2*x^3+5*x^2+2*x))/(x*exp(2*log(x)+x)+x)", "x", "poly")
-- the same, but written in a different way
testIntegrate("((8*x+16)*log(x)^2+(8*x^2+18*x+4)*log(x)+(2*x^3+5*x^2+2*x))/(a*x^2*exp(log(x)+x)+x)", "x", "poly")
testIntegrate("((8*x+16)*log(x)^2+(8*x^2+18*x+4)*log(x)+(2*x^3+5*x^2+2*x))/(a*x^2*exp(log(x)+x)+x)", "x", "poly")
testIntegrate("((-16*x-32)*log(x)^2+(-16*x^2-36*x-8)*log(x)+(-4*x^3-10*x^2-4*x))/(2*x^3*exp(log(x)+x)^2-x)", "x", "poly")
testIntegrate("x/sinh(x)", "x", "poly")
testIntegrate("x^2/sinh(x)", "x", "poly")
testIntegrate("x/sinh(x+2)", "x", "poly")
testIntegrate("x^2/sinh(x+2)", "x", "poly")
testIntegrate("x^2/sinh(a*x+b)", "x", "poly")
testIntegrate("x^2/(cosh(x) + 1)", "x", "poly")
testIntegrate("log(sinh(x))", "x", "poly")
testIntegrate("x*log(sinh(x))", "x", "poly")
testIntegrate("x*log(sinh(x+a))", "x", "poly")
testIntegrate("log(cosh(x)+1)", "x", "poly")
testIntegrate("((x+1)*log(sinh((x+1)/(x-1))))/(x^3-3*x^2+3*x-1)", "x", "poly")
-- Rich
-- not integrable, but similar
testcaseNoClear("1/(x*log(a + b*x))")
testTrue("(integrate(1/(x*log(a + b*x)), x); true)")

testIntegrate("1/(x^2*log(a*x^n))", "x", "poly")

-- Cherry, Caviness
testIntegrate("x/log(x)^2", "x", "li")
testIntegrate("1/(log(x)+3)", "x", "li")
testIntegrate("x^2/log(x+1)", "x", "li")
testIntegrate("exp(x)/(x+1)^2", "x", "Ei")
testIntegrate("x^3/log(x^2 - 1)", "x", "li")
-- Kelly Roach
-- Ei integrable
-- result is OK, but normalize fails to simplify it due to
-- complex coefficients
-- testIntegrate("cos(b*x)*atan(a/x^2)", "x", "Ei")
testcaseNoClear("cos(b*x)*atan(a/x^2)")
testTrue("(integrate(cos(b*x)*atan(a/x^2), x); true)")
-- erf integrable
xf2testIntegrate("cos(a*x^2+b*x)", "x", "erf")
-- Knowles
xf2testIntegrate("exp(-x^2 - erf(x)^2)", "x", "erf")
-- D(-sqrt(%pi)*erf(1/sqrt(log(x))), x)
xf1testIntegrate("exp(-1/log(x))/(x*log(x)*sqrt(log(x)))", "x", "erf")
-- the same, but written in a different way
xf2testIntegrate("exp(-(1/2)*log(log(x)) -1/log(x))/(x*log(x))", "x", "erf")

-- sqrt(%pi)*D(erf(log(x) + 1), x)/2
testIntegrate("exp(-log(x)^2-2*log(x)-1)/x", "x", "erf")

testIntegrate("sin(x)/x", "x", "Ei")
xf2testIntegrate("cos(x)^2/x^3", "x", "Ei")
testIntegrate("(x^2+3)*exp(x)/(x^2+3*x+2)", "x", "Ei")
testIntegrate("((x + 1)*exp(x)*log(x) - exp(x))/(log(x)^2*log(x*exp(x)/log(x)))", "x", "li")
testIntegrate("1/(log(x)*log(li(x)))", "x", "li")

testIntegrate("log(1 + log(z))", "z", "li")

--
testIntegrate("log(sin(x))", "x", "poly")
testIntegrate("log(cosh(x))", "x", "poly")
testIntegrate("x/cosh(x)", "x", "poly")
-- We convert cos to tan, but tangent case is unhandled
xf2testIntegrate("x/cos(x)", "x", "poly")

-- Few examples of Si and Ci
testIntegrate("sin(x+1)/(x+1)", "x", "SiCi")
testIntegrate("cos(x+1)/(x+1)", "x", "SiCi")
testIntegrate("-sin(1/x)/x", "x", "SiCi")
testIntegrate("-cos(1/x)/x", "x", "SiCi")
testIntegrate("((-x^3+2)*sin((x^2)/(x^3+1)))/(x^4+x)", "x", "SiCi")
testIntegrate("((-1*x^3+2)*cos((x^2)/(x^3+1)))/(x^4+x)", "x", "SiCi")

testIntegrate("(1 - exp(-x^2))^2/x^3", "x", "Ei")
testIntegrate("((-x^2+2)*exp(x/(x^2+2)))/(x^3+2*x)", "x", "Ei")
testIntegrate("(2*x^4-x^3+3*x^2+2*x+2)*exp(x/(x^2+2))/(x^3+2*x)", "x", "Ei")
testIntegrate("(4*x^3+4*x)*exp(x^2+1)/(x^4+2*x^2-1)", "x", "Ei")
testIntegrate("((4*log(x)+x)*exp(2*log(x)^2+x))/(2*x*log(x)^2+x^2)", "x", "Ei")
testIntegrate("((log(x)+1)*exp(x*log(x)))/(x*log(x))", "x", "Ei")
testIntegrate("((exp(x)+1)*exp(exp(x)+x))/(exp(x)+x)", "x", "Ei")
testIntegrate("exp(-x^2)*exp(erf(x))/erf(x)", "x", "Ei")
testIntegrate("((tan(x)^2+1)*exp(tan(x)+1))/(tan(x)+1)", "x", "Ei")
testIntegrate("(x*exp(x+1))/(x^2-1)", "x", "Ei")
testIntegrate("(exp(x+log(x)+1))/(x^2-1)", "x", "Ei")
testIntegrate("(x*log(x)+(x^3+2*x^2-1))*exp(log(x)+x+1)/((x^3-x)*log(x)+(x^4+x^3-x^2-x))", "x", "Ei")
testIntegrate("(x*log(x)+(x^3+2*x^2-1))*exp(x+1)/((x^2-1)*log(x)+(x^3+x^2-x-1))", "x", "Ei")
testIntegrate("(x*log(x)+(x^3+2*x^2-1))*exp(log(log(x)) + x+1)/((x^2-1)*log(x)^2+(x^3+x^2-x-1)*log(x))", "x", "Ei")
testIntegrate("(4*x^3*exp(x^2+1))/(x^4-1)", "x", "Ei")
testIntegrate("(exp(-x)-1)*exp(exp(-x)+x)/(exp(-x)+x)", "x", "Ei")
xf2testIntegrate("(((x+1)*exp(-x)+1)*exp(x/(exp(-x)+1)))/(x*exp(-x)+x)", "x", "Ei")
testIntegrate("((-exp(-x)^4+(-x-1)*exp(-x)^3+(-x-1)*exp(-x)^2+(x+1)*exp(-x)-x)*exp(exp(-x)+x))/(exp(-x)^2-x^2)", "x", "Ei")
testIntegrate("(exp(x)^3+(2*x+2)*exp(x)^2+(x^2+3*x+2)*exp(x)+x^2+x+1)*exp(exp(x)+x)/(exp(x)+x)", "x", "Ei")
testIntegrate("(4*x^3+4*x)*exp(x^2+1)/(x^4+2*x^2-1)", "x", "Ei")
testIntegrate("((-x^2-x)*exp(-x)-x)*exp(x/(exp(-x)+1))/((2*exp(-x)^3+6*exp(-x)^2+(-x^2+6)*exp(-x)+(-x^2+2)))", "x", "Ei")
testIntegrate("(2*exp(x)+1)*exp(exp(x)^2+exp(x))/(exp(x)+1)", "x", "Ei")
-- the same written in different way
testIntegrate("(2*exp(x) + 1)*exp(exp(x))*exp(exp(2*x))/(exp(x)+1)", "x", "Ei")
-- f0 := D(Ei(log(x)^2), x)
testIntegrate("2*exp(log(x)^2+2*log(x))/(x^3*log(x))", "x", "Ei")
-- f1 := D(Ei(log(x)*(log(x)+1)), x)
testIntegrate("(2*log(x)+1)*exp(log(x)^2+2*log(x))/(x^2*log(x)^2+x^2*log(x))", "x", "Ei")
-- f2 := D(Ei((log(x)+1)^2), x)/exp(1)
testIntegrate("2*exp(log(x)^2+2*log(x))/(x*log(x)+x)", "x", "Ei")
-- f3 := D(Ei((log(x)+1)*(log(x)+2)), x)/exp(2)
testIntegrate("(2*log(x)+3)*x*exp(log(x)^2+2*log(x))/(x*log(x)^2+3*x*log(x)+2*x)", "x", "Ei")
-- f1 + f3
testIntegrate("(((2*x^2+2)*log(x)^2+(3*x^2+5)*log(x)+2)*exp(log(x)^2+2*log(x)))/(x^2*log(x)^3+3*x^2*log(x)^2+2*x^2*log(x))", "x", "Ei")
-- f1 + f2
testIntegrate("((2*x^2+2*x+2)*log(x)+(x+2))*exp(log(x)^2+2*log(x))/(x^3*log(x)^2+x^3*log(x))", "x", "Ei")
-- f0 + f1 + f2 + f3
testIntegrate("((2*x^3+2*x^2+2*x+2)*log(x)^2+(3*x^3+4*x^2+5*x+6)*log(x)+(2*x+4))*exp(log(x)^2+2*log(x))/(x^3*log(x)^3+3*x^3*log(x)^2+2*x^3*log(x))", "x", "Ei")
testIntegrate("((2*x^3-x^2-6*x)/(x^2+3*x+2) + (2*x-3)/(log(x)+1))*exp(x*log(x)+x)", "x", "Ei")
testIntegrate("(x*log(x)^2+3*x*log(x)+2*x)*exp(x*log(x)+x)/(x^2*log(x)^2+2*x^2*log(x)+x^2-2)", "x", "Ei")
testIntegrate("((2*x^2+2*x)*log(x)^2+(2*x^2+4*x+2)*log(x))*exp(x*log(x))/((x^2+2*x+1)*log(x)^2-2)", "x", "Ei")
testIntegrate("((2*x^2+2*x)*log(x)^2+(2*x^2+4*x+2)*log(x))*x^x/((x^2+2*x+1)*log(x)^2-2)", "x", "Ei")
testIntegrate("(a*x+a)*exp(a*log(x))/(a*x*log(x)+b*x)", "x", "Ei")
testIntegrate("(a*x+a)*exp(a*log(x))/(a*x*log(x)+sqrt(3)*x)", "x", "Ei")
testIntegrate("(2*a^2*x+2*a^2)*log(x)*exp(a*log(x))/(a^2*x*log(x)^2-3*x)", "x", "Ei")
testIntegrate("(2*log(x)*exp(2^(1/2)*log(x)))/(x*log(x)^2-3*x)", "x", "Ei")

-- exp(-2)*D(Ei((log(x)^2 + 2)*(log(x) + 1)), x)
testIntegrate("(3*log(x)^2+2*log(x)+2)*exp(log(x)^3+log(x)^2+2*log(x))/(x*log(x)^3+x*log(x)^2+2*x*log(x)+2*x)", "x", "Ei")
-- exp(-3)*D(Ei((log(x)^2 + 3)*(log(x) + 1)), x)
testIntegrate("(3*log(x)^2+2*log(x)+3)*x*exp(log(x)^3+log(x)^2+2*log(x))/(x*log(x)^3+x*log(x)^2+3*x*log(x)+3*x)", "x", "Ei")
-- sum
testIntegrate("((3*x+3)*log(x)^4+(2*x+2)*log(x)^3+(9*x+11)*log(x)^2+(4*x+6)*log(x)+(6*x+6))*exp(log(x)^3+log(x)^2+2*log(x))/(x*log(x)^5+x*log(x)^4+5*x*log(x)^3+5*x*log(x)^2+6*x*log(x)+6*x)", "x", "Ei")

-- D(Ei((log(x) + 1)/log(x)), x)
testIntegrate("-exp((log(x)+1)/log(x))/(x*log(x)^2+x*log(x))", "x", "Ei")
-- exp(1)*D(Ei((log(x) + 1)/log(x) - (log(x) + 1)), x)
testIntegrate("(log(x)^2+1)*exp((log(x)+1)/log(x))/(x^2*log(x)^3-x^2*log(x))", "x", "Ei")
-- sum
testIntegrate("(log(x)^2-x*log(x)+x+1)*exp((log(x)+1)/log(x))/(x^2*log(x)^3-x^2*log(x))", "x", "Ei")
testIntegrate("cosh(x^(1/2))-acoth(1-x)", "x", "Ei")

-- Fresnel integrals
testIntegrate("sin(x^2)", "x", "fresnel")
testIntegrate("cos(x^2)", "x", "fresnel")
testIntegrate("x*sin(x^2)", "x", "fresnel")
testIntegrate("x*cos(x^2)", "x", "fresnel")
testIntegrate("D(fresnelS(x^2+1), x)", "x", "fresnel")
testIntegrate("D(fresnelC(x^2+1), x)", "x", "fresnel")
testIntegrate("D(fresnelS(a*x + b), x)", "x", "fresnel")
testIntegrate("D(fresnelC(a*x + b), x)", "x", "fresnel")
testIntegrate("D(fresnelS(x^4), x)", "x", "fresnel")
testIntegrate("D(fresnelC(x^4), x)", "x", "fresnel")
xf2testIntegrate("D(fresnelS((a*x + b)/(c*x + d)), x)", "x", "fresnel")
xf2testIntegrate("D(fresnelC((a*x + b)/(c*x + d)), x)", "x", "fresnel")
xf2testIntegrate("D(fresnelS(x^2+x), x)", "x", "fresnel")
testIntegrate("D(fresnelC(x^2+x), x)", "x", "fresnel")

-- mixed cases
testIntegrate("(x-2)*exp(-x^2)/x", "x", "spec")
testIntegrate("(2*x+4)*exp(-x^2-2*x-1)/(x+1)", "x", "spec")
xf2testIntegrate("(x+2)*sin(x^2)/x", "x", "spec")
xf2testIntegrate("(x+3)*sin(x^2+2*x+1)/(x+1)", "x", "spec")
xf2testIntegrate("(x+2)*cos(x^2)/x", "x", "spec")
xf2testIntegrate("(x+3)*cos(x^2+2*x+1)/(x+1)", "x", "spec")

-- Liouvillian functions
testIntegrate("D(log(ellipticE(x, m)), x)", "x", "liou")
testIntegrate("D(ellipticE(x, m)/(ellipticE(x, m) + 3), x)", "x", "liou")
testIntegrate("D(1/(ellipticF(x, m) + x), x)", "x", "liou")
testIntegrate("D(1/(Gamma(a, log(x)^2) + log(x)), x)", "x", "liou")
testIntegrate("D(1/(ellipticPi(x, n, m)^2 + ellipticPi(x, n, m) + x), x)",
               "x", "liou")
testIntegrate("D(log(polylog(3, x)), x)", "x", "liou")
testIntegrate("D(x*exp(-x^2 - erf(x)^2), x)", "x", "liou")
testIntegrate("D(x*exp(-1(x-1)^2 - dilog(x)^2), x)", "x", "liou")
testIntegrate("exp(-x^2)*erf(x)/(erf(x)^3 - erf(x)^2 - erf(x) + 1)",
               "x", "liou")
testIntegrate("exp(-x)*Ei(x)", "x", "liou")
testIntegrate("polylog(3, x)*polylog(5, x)/(x*polylog(4, x)^2)", "x", "liou")

-- derivatives
ff := operator 'ff
df := D(ff(x), x)
fg := operator 'fg
testIntegrate("D(ff(x), x)", "x", "deriv")
testIntegrate("D(ff(x)^2, x)", "x", "deriv")
testIntegrate("D(exp(ff(x)^2), x)", "x", "deriv")
testIntegrate("D(ff(x) + fg(x), x)", "x", "deriv")
testIntegrate("D(ff(x)*fg(x), x)", "x", "deriv")
testIntegrate("D(ff(x)/fg(x), x)", "x", "deriv")
testIntegrate("D(log(ff(x) + fg(x)), x)", "x", "deriv")
testIntegrate("D(log(ff(x)) + 3*log(fg(x)), x)", "x", "deriv")
testIntegrate("D(x*ff(x), x)", "x", "deriv")
testIntegrate("D(ff(x)/(x + ff(x)), x)", "x", "deriv")
testIntegrate("D(ff(x)^2/(ff(x)*df^3 +x*ff(x)*df + 1), x)", "x", "deriv")
testIntegrate("D(log(ff(x) + fg(x))*log(ff(x) + x*fg(x)), x)", "x", "deriv")
testIntegrate("D(log(exp(x) + x)*log(ff(x)+1), x)", "x", "deriv")
testIntegrate("D(log(exp(x) + x)*log(log(ff(x)+1)), x)", "x", "deriv")
testIntegrate("D(sqrt(ff(x)), x)", "x", "deriv")
testIntegrate("D(sqrt(ff(x)^2 + 1), x)", "x", "deriv")
testIntegrate("D(1/(x + sqrt(x*ff(x)^2 + 1)), x)", "x", "deriv")
testIntegrate("D(besselJ(x, z)*ff(x), x)", "x", "deriv")

-- bug in li part
testIntegrate("1/(x*(log(x/a)+1))", "x", "li")
testIntegrate("1/(x^2*(log(x/a)+1))", "x", "li")

-- algebraic extended integration
s1 := sqrt(exp(x) + 1)
l1 := log(sqrt(exp(x) + 1) + exp(x))
testIntegrate("exp(x)*(2*s1 + 1)*l1/(exp(x)*(s1 + 1) + 1)", "x", "algext")
testIntegrate("exp(x)*(l1^2 + exp(x)*(2*s1 + 1)*l1/(exp(x)*(s1 + 1) + 1))",
              "x", "algext")
testIntegrate("sin(x)*atan(sqrt(sec(x) - 1))", "x", "algext")

-- used to produce error: "Denominator not equal to 1"
testIntegrate("sec(x)*tan(x)/sqrt(sec(x) - 1)", "x", "alg")
testIntegrate("(sec(x)^2  - sec(x))/tan(x)/sqrt(sec(x) - 1)", "x", "alg")
testIntegrate("(sec(x)^2  - sec(x))*tan(x)/sqrt(sec(x) - 1)", "x", "alg")

)set output algebra on
statistics()
