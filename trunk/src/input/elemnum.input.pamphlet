\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{\$SPAD/src/input elemnum.input}
\author{The Axiom Team}
\maketitle
\begin{abstract}
\end{abstract}
\eject
\tableofcontents
\eject
\section{License}
<<license>>=
--Copyright The Numerical Algorithms Group Limited 1991.
@
<<*>>=
<<license>>
)set break resume
)expose UnittestCount UnittestAux Unittest

-- SMW June 26, 1991.
testsuite "elemnum"

epsilonAbsolute := 1.0e-15
epsilonrelative := 1.0e-30

testFloat(a: String, b: String): Void ==
    testTrue("abs(" a "-" b") < epsilonAbsolute")
    testTrue("abs(" a "/" b "-1) < epsilonRelative")

testComplexFloat(a: String, b: String): Void ==
    testTrue("norm(" a "-" b") < epsilonAbsolute")
    testTrue("norm(" a "/" b "-1) < epsilonRelative")

inverses := _
["exp log x",                                                                 _
 "log exp x",                                                                 _
 "sin asin x",   "cos acos x",   "tan atan x",   "cot acot x",   "csc acsc x",_
 "sec asec x",                                                                _
 "asin sin x",   "acos cos x",   "atan tan x",   "acot cot x",   "acsc csc x",_ 
 "asec sec x",                                                                _
 "sinh asinh x", "cosh acosh x", "tanh atanh x", "coth acoth x",              _
 "csch acsch x", "sech asech x",                                              _ 
 "asinh sinh x", "acosh cosh x", "atanh tanh x", "acoth coth x",              _
 "acsch csch x", "asech sech x"];

anySubstring?(l: List String, x: String): Boolean ==
--    any?(e +-> match("*" e "*", x, char "*") > 0, l)
    any?(e +-> integer(stringMatch("*" e "*", x, CHARACTER("*")$Lisp)$Lisp) > 0, l)

testcaseNoClear "0.7 Float"
x := 0.7::Float
errlist := ["acsc x", "asec x", "acosh x", "acoth x"]

for ex in inverses | not anySubstring?(errlist, ex) repeat
    testFloat(ex, "x")

testLibraryError "acsc x"
testLibraryError "asec x"
testLibraryError "acosh x"
testLibraryError "acoth x"


testcaseNoClear "0.7 DoubleFloat"
x := 0.7::DoubleFloat
for ex in inverses | not anySubstring?(errlist, ex) repeat
    testFloat(ex, "x")

testLibraryError "acsc x"
testLibraryError "asec x"
testLibraryError "acosh x"
testLibraryError "acoth x"

testcaseNoClear "1.1 Float"
x := 1.1::Float
errlist := ["asin x", "acos x", "atanh x", "asech x"]
for ex in inverses | not anySubstring?(errlist, ex) repeat
    testFloat(ex, "x")

testLibraryError "asin x"
testLibraryError "acos x"
testLibraryError "atanh x"
testLibraryError "asech x"

testcaseNoClear "1.1 DoubleFloat"
x := 1.1::DoubleFloat
for ex in inverses | not anySubstring?(errlist, ex) repeat
    testFloat(ex, "x")
 
testLibraryError "asin x"
testLibraryError "acos x"
testLibraryError "atanh x"
testLibraryError "asech x"

testinverseFloats(a, b, n) ==
-- not declaring x and not converting s1, m1 as numbers to strings leads to the
-- strings being interpreted as Expressions, not Floats
   free x
   m1 := if n = 1 or n = 4 then 0 else  1
   s1 := if n = 1 or n = 4 then 1 else -1
   s2 := if n = 1 or n = 2 then 1 else -1
   x := complex(s1*a, s2*b)
   for ex in inverses repeat
       if member?(ex, ["acos cos x", "asec sec x", _
                       "acosh cosh x", "asech sech x"])
       then testComplexFloat(concat [string s1, "*", ex], "x")
       else if ex = "acot cot x"
       then testComplexFloat(concat [ex, " - ", string m1, "*%pi"], "x")
       else testComplexFloat(ex, "x")

sa := 0.7::DoubleFloat;
sb := 1.1::DoubleFloat;
ba := 0.7::Float;
bb := 1.1::Float;

testcaseNoClear "Complex Float"
)clear value x
x:Complex Float
testinverseFloats(ba, bb, 1);
testinverseFloats(ba, bb, 2);
testinverseFloats(ba, bb, 3);
testinverseFloats(ba, bb, 4);
testcaseNoClear "Complex DoubleFloat"
)clear value x
x:Complex DFLOAT
testinverseFloats(sa, sb, 1);
testinverseFloats(sa, sb, 2);
testinverseFloats(sa, sb, 3);
testinverseFloats(sa, sb, 4);

expected() ==
    messagePrint("testsuite | testcases: failed (total) | tests: failed (total)")$OutputForm;
    messagePrint("elemnum                     0     (6)               0   (608)")$OutputForm

statistics()
expected()

@
\eject
\begin{thebibliography}{99}
\bibitem{1} nothing
\end{thebibliography}
\end{document}
