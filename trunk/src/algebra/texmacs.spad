)if false
\documentclass{article}
\usepackage{axiom}
\begin{document}
\title{\$SPAD/src/algebra texmacs.spad}
\author{Alexander D. Solovets}
\maketitle
\begin{abstract}
TexmacsFormat is a package to produce output as the
special scheme code for TeXmacs.
\end{abstract}
\eject
\tableofcontents
\eject
\section{About this module}
The most of this code were copy-n-pasted from MathML format package. Although I
am going to make stand alone fully-functional TeXmacs package I've left many
comments about the code untouched in order to understand the code quicker. They
will be removed as soon as they won't be needed.
\section{Test Cases}
The testing is made with the following commands executed before the all others : \begin{verbatim}
of1 := ('f)::OutputForm
of2 := ('z)::OutputForm
of3:=('+)::OutputForm
\end{verbatim}
Here's a list of successeful test cases:
\begin{verbatim}
x
x + y
x + y * z
(5 + sqrt 63 + sqrt 847)^(1/3)
set [1, 2, 3]
multiset [x rem 5 for x in primes(2, 1000)]
series(sin(a*x), x = 0)
matrix [ [x^i + y^j for i in 1..3] for j in 1..3]
xs := series 'x
sin(1+xs)
continuedFraction(314159/100000)
yo := operator 'y; D(yo z, z)
D(yo z, z, 2) + D(yo z, z) + yo z = 0
prefix(of1, [of2 for i in 1..5])
infix(of3, [of2 for i in 1..4])
infix(of3, of1, of2)
postfix(of3, of1)
(matrix$OutputForm)([[of1, of2], [of2, of1]])
root(of1)
root(of1, of2)
over(of1, of2)
brace(of1)
brace([of1 for i in 1..4])
bracket(of1)
bracket([of1 for i in 1..4])
paren(of1)
paren([of1 for i in 1..4])
SEGMENT(of1, of2)
SEGMENT(of1)
tensor(of1, of2)
rarrow(of1, of2)
of1 < of2
overbar(of1)
binomial(of1, of2)
slash(of1, of2)
integrate(x^x, x)
integral(x^x, x)
int(of1)
int(of1, of2)
int(of1, of2, of3)
sum(of1)
sum(of1, of2)
sum(of1, of2, of3)
prod(of1)
prod(of1, of2)
prod(of1, of2, of3)
sum((exp(i)+1)^j, i = 1..n)^k
summation(operator(f)(i), i = 1..n)+1
summation(operator(f)(i)+1, i = 1..n)
\end{verbatim}
These tests still fail or give false positives:
\begin{verbatim}
box(prefix(of1, [of2 for i in 1..5]))
label(prefix(of1, [of2 for i in 1..5]), of2)
zag(zag(of1, of2), zag(of1, of2))
assign(of1, of2)
differentiate(of1, 15)
sub(of1, of2)
super(of1, of2)
presub(of1, of2)
presuper(of1, of2)
scripts(of1, [of2, of3, of2, of3])
scripts(of1, [of2, empty()$OutputForm, of3, empty()$OutputForm])
quote(of1)
dot(of1)
dot(of1, 3)
dot(of1, 4)
prime(of1)
prime(of1, 5)
overlabel(of2, of1)
semicolonSeparate([of1 for i in 1..4])
exquo(of1, of2)
\end{verbatim}
The \spadtype{TexmacsFormat} domain has the capability to format an object with
subscripts, superscripts, presubscripts and presuperscripts however
I don't know of any Axiom command that produces such an object. In
fact at present I see the case of "SUPERSUB" being used for putting
primes in the superscript position to denote ordinary differentiation.
I also only see the "SUB" case being used to denote partial
derivatives.
)endif

)abbrev domain TMFORM TexmacsFormat
++ Author: Alexander D. Solovets
++ Date: October 2010
++ This package is based on the MathMLFormat domain by Arthur C. Ralfs
++ without which I wouldn't have known where to start.
++ Basic Operations: coerce, coerceL, display
++ Description:
++    \spadtype{TexmacsFormat} provides a coercion from \spadtype{OutputForm}
++    to TeXmacs format.

TexmacsFormat() : public == private where
  E      ==> OutputForm
  I      ==> Integer
  SI     ==> SingleInteger
  L      ==> List
  S      ==> String
  Sy     ==> Symbol
  US     ==> UniversalSegment(Integer)

  public == SetCategory with
    coerce :    E -> S
      ++ coerceS(o) changes o in the standard output format to Texmacs
      ++ format.
    coerceL :   E -> S
      ++ coerceS(o) changes o in the standard output format to Texmacs
      ++ format and displays result as one long string.
    display :   S -> Void
      ++ prints the string returned by coerce, adding <math ...> tags.

  private == add
    import from OutputForm
    import from Character
    import from Integer
    import from List OutputForm
    import from List String
    import from OutputFormTools

    -- local variable declarations and definitions

    Cork:List Record(corkcode:String,unicode:SI) := [_
      ["<less>",60::SI], _
      ["<gtr>",62::SI], _
      ["<varspace>",160::SI], _
      ["<cent>",162::SI], _
      ["<sterling>",163::SI], _
      ["<currency>",164::SI], _
      ["<yen>",165::SI], _
      ["<brokenvert>",166::SI], _
      ["<copyright>",169::SI], _
      ["<ordfeminine>",170::SI], _
      ["<guillemotleft>",171::SI], _
      ["<neg>",172::SI], _
      ["<hyphen>",173::SI], _
      ["<circledR>",174::SI], _
      ["<degree>",176::SI], _
      ["<pm>",177::SI], _
      ["<twosuperior>",178::SI], _
      ["<threesuperior>",179::SI], _
      ["<mu>",181::SI], _
      ["<paragraph>",182::SI], _
      ["<centerdot>",183::SI], _
      ["<onesuperior>",185::SI], _
      ["<masculine>",186::SI], _
      ["<onequarter>",188::SI], _
      ["<onehalf>",189::SI], _
      ["<threequarters>",190::SI], _
      ["<times>",215::SI], _
      ["<div>",247::SI], _
      ["<nbhyph>",8209::SI], _
      ["<||>",8214::SI], _
      ["<dagger>",8224::SI], _
      ["<ddagger>",8225::SI], _
      ["<bullet>",8226::SI], _
      ["...",8230::SI], _
      ["<prime>",8242::SI], _
      ["<backprime>",8245::SI], _
      ["<bbb-C>",8450::SI], _
      ["<cal-g>",8458::SI], _
      ["<cal-H>",8459::SI], _
      ["<frak-H>",8460::SI], _
      ["<bbb-H>",8461::SI], _
      ["<hslash>",8463::SI], _
      ["<cal-I>",8464::SI], _
      ["<frak-I>",8465::SI], _
      ["<cal-L>",8466::SI], _
      ["<ell>",8467::SI], _
      ["<bbb-N>",8469::SI], _
      ["<wp>",8472::SI], _
      ["<bbb-P>",8473::SI], _
      ["<bbb-Q>",8474::SI], _
      ["<cal-R>",8475::SI], _
      ["<frak-R>",8476::SI], _
      ["<bbb-R>",8477::SI], _
      ["<trademark>",8482::SI], _
      ["<bbb-Z>",8484::SI], _
      ["<Mho>",8487::SI], _
      ["<frak-Z>",8488::SI], _
      ["<cal-B>",8492::SI], _
      ["<frak-C>",8493::SI], _
      ["<cal-e>",8495::SI], _
      ["<cal-E>",8496::SI], _
      ["<cal-F>",8497::SI], _
      ["<cal-M>",8499::SI], _
      ["<cal-o>",8500::SI], _
      ["<aleph>",8501::SI], _
      ["<beth>",8502::SI], _
      ["<gimel>",8503::SI], _
      ["<daleth>",8504::SI], _
      ["<leftarrow>",8592::SI], _
      ["<uparrow>",8593::SI], _
      ["<rightarrow>",8594::SI], _
      ["<downarrow>",8595::SI], _
      ["<leftrightarrow>",8596::SI], _
      ["<updownarrow>",8597::SI], _
      ["<nwarrow>",8598::SI], _
      ["<nearrow>",8599::SI], _
      ["<searrow>",8600::SI], _
      ["<swarrow>",8601::SI], _
      ["<nleftarrow>",8602::SI], _
      ["<nrightarrow>",8603::SI], _
      ["<leftsquigarrow>",8604::SI], _
      ["<rightsquigarrow>",8605::SI], _
      ["<twoheadleftarrow>",8606::SI], _
      ["<twoheadrightarrow>",8608::SI], _
      ["<leftarrowtail>",8610::SI], _
      ["<rightarrowtail>",8611::SI], _
      ["<mapsfrom>",8612::SI], _
      ["<mapsto>",8614::SI], _
      ["<hookleftarrow>",8617::SI], _
      ["<hookrightarrow>",8618::SI], _
      ["<looparrowleft>",8619::SI], _
      ["<looparrowright>",8620::SI], _
      ["<leftrightsquigarrow>",8621::SI], _
      ["<nleftrightarrow>",8622::SI], _
      ["<lightning>",8623::SI], _
      ["<Lsh>",8624::SI], _
      ["<Rsh>",8625::SI], _
      ["<curvearrowleft>",8630::SI], _
      ["<curvearrowright>",8631::SI], _
      ["<circlearrowleft>",8634::SI], _
      ["<circlearrowright>",8635::SI], _
      ["<leftharpoonup>",8636::SI], _
      ["<leftharpoondown>",8637::SI], _
      ["<upharpoonright>",8638::SI], _
      ["<upharpoonleft>",8639::SI], _
      ["<rightharpoonup>",8640::SI], _
      ["<rightharpoondown>",8641::SI], _
      ["<downharpoonright>",8642::SI], _
      ["<downharpoonleft>",8643::SI], _
      ["<rightleftarrows>",8644::SI], _
      ["<leftrightarrows>",8646::SI], _
      ["<leftleftarrows>",8647::SI], _
      ["<upuparrows>",8648::SI], _
      ["<rightrightarrows>",8649::SI], _
      ["<downdownarrows>",8650::SI], _
      ["<leftrightharpoons>",8651::SI], _
      ["<rightleftharpoons>",8652::SI], _
      ["<nLeftarrow>",8653::SI], _
      ["<nLeftrightarrow>",8654::SI], _
      ["<nRightarrow>",8655::SI], _
      ["<Leftarrow>",8656::SI], _
      ["<Uparrow>",8657::SI], _
      ["<Rightarrow>",8658::SI], _
      ["<Downarrow>",8659::SI], _
      ["<Leftrightarrow>",8660::SI], _
      ["<Updownarrow>",8661::SI], _
      ["<Lleftarrow>",8666::SI], _
      ["<Rrightarrow>",8667::SI], _
      ["<forall>",8704::SI], _
      ["<complement>",8705::SI], _
      ["<partial>",8706::SI], _
      ["<exists>",8707::SI], _
      ["<nexists>",8708::SI], _
      ["<emptyset>",8709::SI], _
      ["<nabla>",8711::SI], _
      ["<in>",8712::SI], _
      ["<nin>",8713::SI], _
      ["<ni>",8715::SI], _
      ["<nni>",8716::SI], _
      ["<big-prod>",8719::SI], _
      ["<big-amalg>",8720::SI], _
      ["<big-sum>",8721::SI], _
      ["<minus>",8722::SI], _
      ["<mp>",8723::SI], _
      ["<dotplus>",8724::SI], _
      ["<setminus>",8726::SI], _
      ["<ast>",8727::SI], _
      ["<circ>",8728::SI], _
      ["<sqrt>",8730::SI], _
      ["<propto>",8733::SI], _
      ["<infty>",8734::SI], _
      ["<angle>",8736::SI], _
      ["<measuredangle>",8737::SI], _
      ["<sphericalangle>",8738::SI], _
      ["<mid>",8739::SI], _
      ["<nmid>",8740::SI], _
      ["<parallel>",8741::SI], _
      ["<nparallel>",8742::SI], _
      ["<wedge>",8743::SI], _
      ["<vee>",8744::SI], _
      ["<cap>",8745::SI], _
      ["<cup>",8746::SI], _
      ["<big-int>",8747::SI], _
      ["<big-oint>",8750::SI], _
      ["<therefore>",8756::SI], _
      ["<because>",8757::SI], _
      ["<sim>",8764::SI], _
      ["<backsim>",8765::SI], _
      ["<wr>",8768::SI], _
      ["<nsim>",8769::SI], _
      ["<eqsim>",8770::SI], _
      ["<simeq>",8771::SI], _
      ["<nsimeq>",8772::SI], _
      ["<cong>",8773::SI], _
      ["<ncong>",8775::SI], _
      ["<approx>",8776::SI], _
      ["<napprox>",8777::SI], _
      ["<approxeq>",8778::SI], _
      ["<asymp>",8781::SI], _
      ["<Bumpeq>",8782::SI], _
      ["<bumpeq>",8783::SI], _
      ["<doteq>",8784::SI], _
      ["<doteqdot>",8785::SI], _
      ["<fallingdoteq>",8786::SI], _
      ["<risingdoteq>",8787::SI], _
      ["<assign>",8788::SI], _
      ["<eqcirc>",8790::SI], _
      ["<circeq>",8791::SI], _
      ["<triangleq>",8796::SI], _
      ["<neq>",8800::SI], _
      ["<equiv>",8801::SI], _
      ["<nequiv>",8802::SI], _
      ["<leq>",8804::SI], _
      ["<geq>",8805::SI], _
      ["<leqq>",8806::SI], _
      ["<geqq>",8807::SI], _
      ["<lneqq>",8808::SI], _
      ["<gneqq>",8809::SI], _
      ["<ll>",8810::SI], _
      ["<gg>",8811::SI], _
      ["<between>",8812::SI], _
      ["<nasymp>",8813::SI], _
      ["<nless>",8814::SI], _
      ["<ngtr>",8815::SI], _
      ["<nleq>",8816::SI], _
      ["<ngeq>",8817::SI], _
      ["<lesssim>",8818::SI], _
      ["<gtrsim>",8819::SI], _
      ["<lessgtr>",8822::SI], _
      ["<gtrless>",8823::SI], _
      ["<prec>",8826::SI], _
      ["<succ>",8827::SI], _
      ["<preccurlyeq>",8828::SI], _
      ["<succcurlyeq>",8829::SI], _
      ["<precsim>",8830::SI], _
      ["<succsim>",8831::SI], _
      ["<nprec>",8832::SI], _
      ["<nsucc>",8833::SI], _
      ["<subset>",8834::SI], _
      ["<supset>",8835::SI], _
      ["<nsubset>",8836::SI], _
      ["<nsupset>",8837::SI], _
      ["<subseteq>",8838::SI], _
      ["<supseteq>",8839::SI], _
      ["<nsubseteq>",8840::SI], _
      ["<nsupseteq>",8841::SI], _
      ["<subsetneq>",8842::SI], _
      ["<supsetneq>",8843::SI], _
      ["<uplus>",8846::SI], _
      ["<sqsubset>",8847::SI], _
      ["<sqsupset>",8848::SI], _
      ["<sqsubseteq>",8849::SI], _
      ["<sqsupseteq>",8850::SI], _
      ["<sqcap>",8851::SI], _
      ["<sqcup>",8852::SI], _
      ["<varoplus>",8853::SI], _
      ["<varominus>",8854::SI], _
      ["<varotimes>",8855::SI], _
      ["<varoslash>",8856::SI], _
      ["<varodot>",8857::SI], _
      ["<varocircle>",8858::SI], _
      ["<varoast>",8859::SI], _
      ["<circleddash>",8861::SI], _
      ["<boxplus>",8862::SI], _
      ["<boxminus>",8863::SI], _
      ["<boxtimes>",8864::SI], _
      ["<boxdot>",8865::SI], _
      ["<vdash>",8866::SI], _
      ["<dashv>",8867::SI], _
      ["<top>",8868::SI], _
      ["<bot>",8869::SI], _
      ["<models>",8871::SI], _
      ["<vDash>",8872::SI], _
      ["<Vdash>",8873::SI], _
      ["<Vvdash>",8874::SI], _
      ["<nvdash>",8876::SI], _
      ["<nvDash>",8877::SI], _
      ["<nVdash>",8878::SI], _
      ["<nVDash>",8879::SI], _
      ["<vartriangleleft>",8882::SI], _
      ["<vartriangleright>",8883::SI], _
      ["<trianglelefteq>",8884::SI], _
      ["<trianglerighteq>",8885::SI], _
      ["<multimap>",8888::SI], _
      ["<intercal>",8890::SI], _
      ["<veebar>",8891::SI], _
      ["<big-wedge>",8896::SI], _
      ["<big-vee>",8897::SI], _
      ["<big-cap>",8898::SI], _
      ["<big-cup>",8899::SI], _
      ["<diamond>",8900::SI], _
      ["<cdot>",8901::SI], _
      ["<star>",8902::SI], _
      ["<divideontimes>",8903::SI], _
      ["<join>",8904::SI], _
      ["<ltimes>",8905::SI], _
      ["<rtimes>",8906::SI], _
      ["<leftthreetimes>",8907::SI], _
      ["<rightthreetimes>",8908::SI], _
      ["<backsimeq>",8909::SI], _
      ["<curlyvee>",8910::SI], _
      ["<curlywedge>",8911::SI], _
      ["<Subset>",8912::SI], _
      ["<Supset>",8913::SI], _
      ["<Cap>",8914::SI], _
      ["<Cup>",8915::SI], _
      ["<pitchfork>",8916::SI], _
      ["<lessdot>",8918::SI], _
      ["<gtrdot>",8919::SI], _
      ["<lll>",8920::SI], _
      ["<ggg>",8921::SI], _
      ["<lesseqgtr>",8922::SI], _
      ["<gtreqless>",8923::SI], _
      ["<curlyeqprec>",8926::SI], _
      ["<curlyeqsucc>",8927::SI], _
      ["<npreccurlyeq>",8928::SI], _
      ["<nsucccurlyeq>",8929::SI], _
      ["<nsqsubseteq>",8930::SI], _
      ["<nsqsupseteq>",8931::SI], _
      ["<lnsim>",8934::SI], _
      ["<gnsim>",8935::SI], _
      ["<precnsim>",8936::SI], _
      ["<succnsim>",8937::SI], _
      ["<ntriangleleft>",8938::SI], _
      ["<ntriangleright>",8939::SI], _
      ["<ntrianglelefteq>",8940::SI], _
      ["<ntrianglerighteq>",8941::SI], _
      ["<vdots>",8942::SI], _
      ["<cdots>",8943::SI], _
      ["<udots>",8944::SI], _
      ["<ddots>",8945::SI], _
      ["<diameter>",8960::SI], _
      ["<barwedge>",8965::SI], _
      ["<doublebarwedge>",8966::SI], _
      ["<lceil>",8968::SI], _
      ["<rceil>",8969::SI], _
      ["<lfloor>",8970::SI], _
      ["<rfloor>",8971::SI], _
      ["<invneg>",8976::SI], _
      ["<recorder>",8981::SI], _
      ["<ulcorner>",8988::SI], _
      ["<urcorner>",8989::SI], _
      ["<llcorner>",8990::SI], _
      ["<lrcorner>",8991::SI], _
      ["<frown>",8994::SI], _
      ["<smile>",8995::SI], _
      ["<talloblong>",9016::SI], _
      ["<APLleftarrowbox>",9031::SI], _
      ["<APLrightarrowbox>",9032::SI], _
      ["<APLuparrowbox>",9040::SI], _
      ["<APLdownarrowbox>",9047::SI], _
      ["<APLinput>",9054::SI], _
      ["<APLbox>",9109::SI], _
      ["<circledS>",9416::SI], _
      ["<blacksquare>",9632::SI], _
      ["<Square>",9633::SI], _
      ["<oblong>",9647::SI], _
      ["<bigtriangleup>",9651::SI], _
      ["<blacktriangle>",9652::SI], _
      ["<vartriangle>",9653::SI], _
      ["<blacktriangleright>",9656::SI], _
      ["<triangleright>",9657::SI], _
      ["<bigtriangledown>",9661::SI], _
      ["<blacktriangledown>",9662::SI], _
      ["<triangledown>",9663::SI], _
      ["<blacktriangleleft>",9666::SI], _
      ["<triangleleft>",9667::SI], _
      ["<wasyDiamond>",9671::SI], _
      ["<lozenge>",9674::SI], _
      ["<Circle>",9675::SI], _
      ["<CIRCLE>",9679::SI], _
      ["<LEFTcircle>",9680::SI], _
      ["<RIGHTcircle>",9681::SI], _
      ["<LEFTCIRCLE>",9686::SI], _
      ["<RIGHTCIRCLE>",9687::SI], _
      ["<varbigcirc>",9711::SI], _
      ["<square>",9725::SI], _
      ["<bigstar>",9733::SI], _
      ["<astrosun>",9737::SI], _
      ["<ascnode>",9738::SI], _
      ["<descnode>",9739::SI], _
      ["<conjunction>",9740::SI], _
      ["<opposition>",9741::SI], _
      ["<phone>",9742::SI], _
      ["<XBox>",9745::SI], _
      ["<CheckedBox>",9746::SI], _
      ["<frownie>",9785::SI], _
      ["<smiley>",9786::SI], _
      ["<blacksmiley>",9787::SI], _
      ["<sun>",9788::SI], _
      ["<rightmoon>",9789::SI], _
      ["<leftmoon>",9790::SI], _
      ["<mercury>",9791::SI], _
      ["<female>",9792::SI], _
      ["<earth>",9793::SI], _
      ["<male>",9794::SI], _
      ["<jupiter>",9795::SI], _
      ["<saturn>",9796::SI], _
      ["<uranus>",9797::SI], _
      ["<neptune>",9798::SI], _
      ["<pluto>",9799::SI], _
      ["<aries>",9800::SI], _
      ["<taurus>",9801::SI], _
      ["<gemini>",9802::SI], _
      ["<cancer>",9803::SI], _
      ["<leo>",9804::SI], _
      ["<virgo>",9805::SI], _
      ["<libra>",9806::SI], _
      ["<scorpio>",9807::SI], _
      ["<sagittarius>",9808::SI], _
      ["<capricornus>",9809::SI], _
      ["<aquarius>",9810::SI], _
      ["<pisces>",9811::SI], _
      ["<spadesuit>",9824::SI], _
      ["<clubsuit>",9827::SI], _
      ["<heartsuit>",9829::SI], _
      ["<diamondsuit>",9830::SI], _
      ["<quarternote>",9833::SI], _
      ["<eighthnote>",9834::SI], _
      ["<twonotes>",9835::SI], _
      ["<flat>",9837::SI], _
      ["<natural>",9838::SI], _
      ["<sharp>",9839::SI], _
      ["<checkmark>",10003::SI], _
      ["<Alpha>",913::SI], _
      ["<Beta>",914::SI], _
      ["<Gamma>",915::SI], _
      ["<Delta>",916::SI], _
      ["<Epsilon>",917::SI], _
      ["<Zeta>",918::SI], _
      ["<Eta>",919::SI], _
      ["<Theta>",920::SI], _
      ["<Iota>",921::SI], _
      ["<Kappa>",922::SI], _
      ["<Lambda>",923::SI], _
      ["<Mu>",924::SI], _
      ["<Nu>",925::SI], _
      ["<Xi>",926::SI], _
      ["<Omicron>",927::SI], _
      ["<Pi>",928::SI], _
      ["<Rho>",929::SI], _
      ["<Sigma>",931::SI], _
      ["<Tau>",932::SI], _
      ["<Upsilon>",933::SI], _
      ["<Phi>",934::SI], _
      ["<Chi>",935::SI], _
      ["<Psi>",936::SI], _
      ["<Omega>",937::SI], _
      ["<alpha>",945::SI], _
      ["<beta>",946::SI], _
      ["<gamma>",947::SI], _
      ["<delta>",948::SI], _
      ["<varepsilon>",949::SI], _
      ["<zeta>",950::SI], _
      ["<eta>",951::SI], _
      ["<theta>",952::SI], _
      ["<iota>",953::SI], _
      ["<kappa>",954::SI], _
      ["<lambda>",955::SI], _
      ["<mu>",956::SI], _
      ["<nu>",957::SI], _
      ["<xi>",958::SI], _
      ["<omicron>",959::SI], _
      ["<pi>",960::SI], _
      ["<rho>",961::SI], _
      ["<varsigma>",962::SI], _
      ["<sigma>",963::SI], _
      ["<tau>",964::SI], _
      ["<upsilon>",965::SI], _
      ["<varphi>",966::SI], _
      ["<chi>",967::SI], _
      ["<psi>",968::SI], _
      ["<omega>",969::SI], _
      ["<vartheta>",977::SI], _
      ["<phi>",981::SI], _
      ["<varpi>",982::SI], _
      ["<digamma>",989::SI], _
      ["<varkappa>",1008::SI], _
      ["<varrho>",1009::SI], _
      ["<epsilon>",1013::SI], _
      ["<longequal>",65309::SI], _
      ["<b-up-A>",119808::SI], _
      ["<b-up-B>",119809::SI], _
      ["<b-up-C>",119810::SI], _
      ["<b-up-D>",119811::SI], _
      ["<b-up-E>",119812::SI], _
      ["<b-up-F>",119813::SI], _
      ["<b-up-G>",119814::SI], _
      ["<b-up-H>",119815::SI], _
      ["<b-up-I>",119816::SI], _
      ["<b-up-J>",119817::SI], _
      ["<b-up-K>",119818::SI], _
      ["<b-up-L>",119819::SI], _
      ["<b-up-M>",119820::SI], _
      ["<b-up-N>",119821::SI], _
      ["<b-up-O>",119822::SI], _
      ["<b-up-P>",119823::SI], _
      ["<b-up-Q>",119824::SI], _
      ["<b-up-R>",119825::SI], _
      ["<b-up-S>",119826::SI], _
      ["<b-up-T>",119827::SI], _
      ["<b-up-U>",119828::SI], _
      ["<b-up-V>",119829::SI], _
      ["<b-up-W>",119830::SI], _
      ["<b-up-X>",119831::SI], _
      ["<b-up-Y>",119832::SI], _
      ["<b-up-Z>",119833::SI], _
      ["<b-up-a>",119834::SI], _
      ["<b-up-b>",119835::SI], _
      ["<b-up-c>",119836::SI], _
      ["<b-up-d>",119837::SI], _
      ["<b-up-e>",119838::SI], _
      ["<b-up-f>",119839::SI], _
      ["<b-up-g>",119840::SI], _
      ["<b-up-h>",119841::SI], _
      ["<b-up-i>",119842::SI], _
      ["<b-up-j>",119843::SI], _
      ["<b-up-k>",119844::SI], _
      ["<b-up-l>",119845::SI], _
      ["<b-up-m>",119846::SI], _
      ["<b-up-n>",119847::SI], _
      ["<b-up-o>",119848::SI], _
      ["<b-up-p>",119849::SI], _
      ["<b-up-q>",119850::SI], _
      ["<b-up-r>",119851::SI], _
      ["<b-up-s>",119852::SI], _
      ["<b-up-t>",119853::SI], _
      ["<b-up-u>",119854::SI], _
      ["<b-up-v>",119855::SI], _
      ["<b-up-w>",119856::SI], _
      ["<b-up-x>",119857::SI], _
      ["<b-up-y>",119858::SI], _
      ["<b-up-z>",119859::SI], _
      ["<b-A>",119912::SI], _
      ["<b-B>",119913::SI], _
      ["<b-C>",119914::SI], _
      ["<b-D>",119915::SI], _
      ["<b-E>",119916::SI], _
      ["<b-F>",119917::SI], _
      ["<b-G>",119918::SI], _
      ["<b-H>",119919::SI], _
      ["<b-I>",119920::SI], _
      ["<b-J>",119921::SI], _
      ["<b-K>",119922::SI], _
      ["<b-L>",119923::SI], _
      ["<b-M>",119924::SI], _
      ["<b-N>",119925::SI], _
      ["<b-O>",119926::SI], _
      ["<b-P>",119927::SI], _
      ["<b-Q>",119928::SI], _
      ["<b-R>",119929::SI], _
      ["<b-S>",119930::SI], _
      ["<b-T>",119931::SI], _
      ["<b-U>",119932::SI], _
      ["<b-V>",119933::SI], _
      ["<b-W>",119934::SI], _
      ["<b-X>",119935::SI], _
      ["<b-Y>",119936::SI], _
      ["<b-Z>",119937::SI], _
      ["<b-a>",119938::SI], _
      ["<b-b>",119939::SI], _
      ["<b-c>",119940::SI], _
      ["<b-d>",119941::SI], _
      ["<b-e>",119942::SI], _
      ["<b-f>",119943::SI], _
      ["<b-g>",119944::SI], _
      ["<b-h>",119945::SI], _
      ["<b-i>",119946::SI], _
      ["<b-j>",119947::SI], _
      ["<b-k>",119948::SI], _
      ["<b-l>",119949::SI], _
      ["<b-m>",119950::SI], _
      ["<b-n>",119951::SI], _
      ["<b-o>",119952::SI], _
      ["<b-p>",119953::SI], _
      ["<b-q>",119954::SI], _
      ["<b-r>",119955::SI], _
      ["<b-s>",119956::SI], _
      ["<b-t>",119957::SI], _
      ["<b-u>",119958::SI], _
      ["<b-v>",119959::SI], _
      ["<b-w>",119960::SI], _
      ["<b-x>",119961::SI], _
      ["<b-y>",119962::SI], _
      ["<b-z>",119963::SI], _
      ["<cal-A>",119964::SI], _
      ["<cal-C>",119966::SI], _
      ["<cal-D>",119967::SI], _
      ["<cal-G>",119970::SI], _
      ["<cal-J>",119973::SI], _
      ["<cal-K>",119974::SI], _
      ["<cal-N>",119977::SI], _
      ["<cal-O>",119978::SI], _
      ["<cal-P>",119979::SI], _
      ["<cal-Q>",119980::SI], _
      ["<cal-S>",119982::SI], _
      ["<cal-T>",119983::SI], _
      ["<cal-U>",119984::SI], _
      ["<cal-V>",119985::SI], _
      ["<cal-W>",119986::SI], _
      ["<cal-X>",119987::SI], _
      ["<cal-Y>",119988::SI], _
      ["<cal-Z>",119989::SI], _
      ["<cal-a>",119990::SI], _
      ["<cal-b>",119991::SI], _
      ["<cal-c>",119992::SI], _
      ["<cal-d>",119993::SI], _
      ["<cal-f>",119995::SI], _
      ["<cal-h>",119997::SI], _
      ["<cal-i>",119998::SI], _
      ["<cal-j>",119999::SI], _
      ["<cal-k>",120000::SI], _
      ["<cal-l>",120001::SI], _
      ["<cal-m>",120002::SI], _
      ["<cal-n>",120003::SI], _
      ["<cal-p>",120005::SI], _
      ["<cal-q>",120006::SI], _
      ["<cal-r>",120007::SI], _
      ["<cal-s>",120008::SI], _
      ["<cal-t>",120009::SI], _
      ["<cal-u>",120010::SI], _
      ["<cal-v>",120011::SI], _
      ["<cal-w>",120012::SI], _
      ["<cal-x>",120013::SI], _
      ["<cal-y>",120014::SI], _
      ["<cal-z>",120015::SI], _
      ["<frak-A>",120068::SI], _
      ["<frak-B>",120069::SI], _
      ["<frak-D>",120071::SI], _
      ["<frak-E>",120072::SI], _
      ["<frak-F>",120073::SI], _
      ["<frak-G>",120074::SI], _
      ["<frak-J>",120077::SI], _
      ["<frak-K>",120078::SI], _
      ["<frak-L>",120079::SI], _
      ["<frak-M>",120080::SI], _
      ["<frak-N>",120081::SI], _
      ["<frak-O>",120082::SI], _
      ["<frak-P>",120083::SI], _
      ["<frak-Q>",120084::SI], _
      ["<frak-S>",120086::SI], _
      ["<frak-T>",120087::SI], _
      ["<frak-U>",120088::SI], _
      ["<frak-V>",120089::SI], _
      ["<frak-W>",120090::SI], _
      ["<frak-X>",120091::SI], _
      ["<frak-Y>",120092::SI], _
      ["<frak-a>",120094::SI], _
      ["<frak-b>",120095::SI], _
      ["<frak-c>",120096::SI], _
      ["<frak-d>",120097::SI], _
      ["<frak-e>",120098::SI], _
      ["<frak-f>",120099::SI], _
      ["<frak-g>",120100::SI], _
      ["<frak-h>",120101::SI], _
      ["<frak-i>",120102::SI], _
      ["<frak-j>",120103::SI], _
      ["<frak-k>",120104::SI], _
      ["<frak-l>",120105::SI], _
      ["<frak-m>",120106::SI], _
      ["<frak-n>",120107::SI], _
      ["<frak-o>",120108::SI], _
      ["<frak-p>",120109::SI], _
      ["<frak-q>",120110::SI], _
      ["<frak-r>",120111::SI], _
      ["<frak-s>",120112::SI], _
      ["<frak-t>",120113::SI], _
      ["<frak-u>",120114::SI], _
      ["<frak-v>",120115::SI], _
      ["<frak-w>",120116::SI], _
      ["<frak-x>",120117::SI], _
      ["<frak-y>",120118::SI], _
      ["<frak-z>",120119::SI], _
      ["<bbb-A>",120120::SI], _
      ["<bbb-B>",120121::SI], _
      ["<bbb-D>",120123::SI], _
      ["<bbb-E>",120124::SI], _
      ["<bbb-F>",120125::SI], _
      ["<bbb-G>",120126::SI], _
      ["<bbb-I>",120128::SI], _
      ["<bbb-J>",120129::SI], _
      ["<bbb-K>",120130::SI], _
      ["<bbb-L>",120131::SI], _
      ["<bbb-M>",120132::SI], _
      ["<bbb-O>",120134::SI], _
      ["<bbb-S>",120138::SI], _
      ["<bbb-T>",120139::SI], _
      ["<bbb-U>",120140::SI], _
      ["<bbb-V>",120141::SI], _
      ["<bbb-W>",120142::SI], _
      ["<bbb-X>",120143::SI], _
      ["<bbb-Y>",120144::SI], _
      ["<bbb-a>",120146::SI], _
      ["<bbb-b>",120147::SI], _
      ["<bbb-c>",120148::SI], _
      ["<bbb-d>",120149::SI], _
      ["<bbb-e>",120150::SI], _
      ["<bbb-f>",120151::SI], _
      ["<bbb-g>",120152::SI], _
      ["<bbb-h>",120153::SI], _
      ["<bbb-i>",120154::SI], _
      ["<bbb-j>",120155::SI], _
      ["<bbb-k>",120156::SI], _
      ["<bbb-l>",120157::SI], _
      ["<bbb-m>",120158::SI], _
      ["<bbb-n>",120159::SI], _
      ["<bbb-o>",120160::SI], _
      ["<bbb-p>",120161::SI], _
      ["<bbb-q>",120162::SI], _
      ["<bbb-r>",120163::SI], _
      ["<bbb-s>",120164::SI], _
      ["<bbb-t>",120165::SI], _
      ["<bbb-u>",120166::SI], _
      ["<bbb-v>",120167::SI], _
      ["<bbb-w>",120168::SI], _
      ["<bbb-x>",120169::SI], _
      ["<bbb-y>",120170::SI], _
      ["<bbb-z>",120171::SI], _
      ["<b-Alpha>",120488::SI], _
      ["<b-Beta>",120489::SI], _
      ["<b-Gamma>",120490::SI], _
      ["<b-Delta>",120491::SI], _
      ["<b-Epsilon>",120492::SI], _
      ["<b-Zeta>",120493::SI], _
      ["<b-Eta>",120494::SI], _
      ["<b-Theta>",120495::SI], _
      ["<b-Iota>",120496::SI], _
      ["<b-Kappa>",120497::SI], _
      ["<b-Lambda>",120498::SI], _
      ["<b-Mu>",120499::SI], _
      ["<b-Nu>",120500::SI], _
      ["<b-Xi>",120501::SI], _
      ["<b-Omicron>",120502::SI], _
      ["<b-Pi>",120503::SI], _
      ["<b-Rho>",120504::SI], _
      ["<b-Sigma>",120506::SI], _
      ["<b-Tau>",120507::SI], _
      ["<b-Upsilon>",120508::SI], _
      ["<b-Phi>",120509::SI], _
      ["<b-Chi>",120510::SI], _
      ["<b-Psi>",120511::SI], _
      ["<b-Omega>",120512::SI], _
      ["<b-up-alpha>",120514::SI], _
      ["<b-up-beta>",120515::SI], _
      ["<b-up-gamma>",120516::SI], _
      ["<b-up-delta>",120517::SI], _
      ["<b-up-varepsilon>",120518::SI], _
      ["<b-up-zeta>",120519::SI], _
      ["<b-up-eta>",120520::SI], _
      ["<b-up-theta>",120521::SI], _
      ["<b-up-iota>",120522::SI], _
      ["<b-up-kappa>",120523::SI], _
      ["<b-up-lambda>",120524::SI], _
      ["<b-up-mu>",120525::SI], _
      ["<b-up-nu>",120526::SI], _
      ["<b-up-xi>",120527::SI], _
      ["<b-up-omicron>",120528::SI], _
      ["<b-up-pi>",120529::SI], _
      ["<b-up-rho>",120530::SI], _
      ["<b-up-varsigma>",120531::SI], _
      ["<b-up-sigma>",120532::SI], _
      ["<b-up-tau>",120533::SI], _
      ["<b-up-upsilon>",120534::SI], _
      ["<b-up-varphi>",120535::SI], _
      ["<b-up-chi>",120536::SI], _
      ["<b-up-psi>",120537::SI], _
      ["<b-up-omega>",120538::SI], _
      ["<b-up-epsilon>",120540::SI], _
      ["<b-up-vartheta>",120541::SI], _
      ["<b-up-varkappa>",120542::SI], _
      ["<b-up-phi>",120543::SI], _
      ["<b-up-varrho>",120544::SI], _
      ["<b-up-varpi>",120545::SI], _
      ["<b-alpha>",120630::SI], _
      ["<b-beta>",120631::SI], _
      ["<b-gamma>",120632::SI], _
      ["<b-delta>",120633::SI], _
      ["<b-varepsilon>",120634::SI], _
      ["<b-zeta>",120635::SI], _
      ["<b-eta>",120636::SI], _
      ["<b-theta>",120637::SI], _
      ["<b-iota>",120638::SI], _
      ["<b-kappa>",120639::SI], _
      ["<b-lambda>",120640::SI], _
      ["<b-mu>",120641::SI], _
      ["<b-nu>",120642::SI], _
      ["<b-xi>",120643::SI], _
      ["<b-omicron>",120644::SI], _
      ["<b-pi>",120645::SI], _
      ["<b-rho>",120646::SI], _
      ["<b-varsigma>",120647::SI], _
      ["<b-sigma>",120648::SI], _
      ["<b-tau>",120649::SI], _
      ["<b-upsilon>",120650::SI], _
      ["<b-varphi>",120651::SI], _
      ["<b-chi>",120652::SI], _
      ["<b-psi>",120653::SI], _
      ["<b-omega>",120654::SI], _
      ["<b-epsilon>",120656::SI], _
      ["<b-vartheta>",120657::SI], _
      ["<b-varkappa>",120658::SI], _
      ["<b-phi>",120659::SI], _
      ["<b-varrho>",120660::SI], _
      ["<b-varpi>",120661::SI], _
      ["<b-0>",120782::SI], _
      ["<b-1>",120783::SI], _
      ["<b-2>",120784::SI], _
      ["<b-3>",120785::SI], _
      ["<b-4>",120786::SI], _
      ["<b-5>",120787::SI], _
      ["<b-6>",120788::SI], _
      ["<b-7>",120789::SI], _
      ["<b-8>",120790::SI], _
      ["<b-9>",120791::SI]]

    expr : E
    prec, opPrec : I
    str :  S
    blank         : S := " \  "

    maxPrec       : I   := 1000000
    minPrec       : I   := 0

    unaryOps      : L Sy := ["-"::Sy]$(L Sy)
    unaryPrecs    : L I := [710]$(L I)

    -- the precedence of / in the following is relatively low because
    -- the bar obviates the need for parentheses.
    binaryOps     : L Sy := ["+->"::Sy, "|"::Sy, "^"::Sy, "/"::Sy, "="::Sy,
                             "~="::Sy, "<"::Sy, "<="::Sy, ">"::Sy, ">="::Sy,
                               'OVER, 'LET]
    binaryPrecs   : L I := [0, 0, 900, 700, 400,
                            400, 400, 400, 400, 400,
                              700, 125]$(L I)

    naryOps       : L Sy := ["-"::Sy, "+"::Sy, "*"::Sy, ","::Sy, ";"::Sy,
                             'ROW, 'STRSEP, 'TENSOR]
    naryPrecs     : L I := [700, 700, 800, 110, 110,
                            0, 0, 850]$(L I)
    naryNGOps     : L Sy := ['ROW]

    plexOps       : L Sy := ['SIGMA, 'SIGMA2, 'PI, 'PI2, 'INTSIGN]
    plexPrecs     : L I := [ 750, 750, 750, 750, 700]$(L I)

    specialOps    : L Sy := ['MATRIX, 'BRACKET, 'BRACE, 'CONCATB, 'VCONCAT,  _
                             'AGGLST, 'CONCAT, 'OVERBAR, 'ROOT, 'SUB, 'TAG, _
                             'SUPERSUB, 'ZAG, 'AGGSET, 'SC, 'PAREN, _
                             'SEGMENT, 'QUOTE, 'theMap, 'SLASH, 'PRIME, _
                             'BOX, 'EQUATNUM, 'BINOMIAL, 'NOTHING]

    -- the next two lists provide translations for some strings for
    -- which MML provides special macros.

    specialStrings : L Sy :=
      ['cos, 'cot, 'csc, 'log, 'sec, 'sin, 'tan,
        'cosh, 'coth, 'csch, 'sech, 'sinh, 'tanh,
          'acos, 'asin, 'atan, 'erf, "..."::Sy, "$"::Sy, 'infinity,
            'Gamma]
    specialStringsInMML : L S :=
      ["_"cos_"","_"cot_"","_"csc_"","_"log_"","_"sec_"","_"sin_"","_"tan_"",
        "_"cosh_"","_"coth_"","_"csch_"","_"sech_"","_"sinh_"","_"tanh_"",
          "_"arccos_"","_"arcsin_"","_"arctan_"","_"erf_"","_"<cdots>_"","_"$_"","_"<infty>_"","_"<Gamma>_""]

    -- local function signatures

    addBraces :      S -> S
    addBrackets :    S -> S
    group :          S -> S
    cork :           SI -> S
    utf2cork :       S -> S
    formatBinary :   (Sy, L E, I) -> S
    formatFunction : (E, L E, I) -> S
    formatIntBody :  (E, I) -> S
    formatMatrix :   L E -> S
    formatNary :     (Sy, S, I, L E, I) -> S
    formatNaryNoGroup : (Sy, S, I, L E, I) -> S
    formatNullary :  Sy -> S
    formatPlex :     (Sy, L E, I) -> S
    formatSpecial :  (Sy, L E, I) -> S
    formatUnary :    (Sy, E, I) -> S
    formatExpr :      (E, I) -> S

    formatZag :      L E -> S
    formatZag1 :     L E -> S
    newWithNum :     I -> %
    parenthesize :   S -> S
    precondition :   E -> E
    postcondition :  S -> S
    stringify :      E -> S
    ungroup :        S -> S

    -- public function definitions

    coerce(expr : E) : S ==
      s : S := postcondition formatExpr(precondition expr, minPrec)
      s

    sayExpr(s : S) : Void ==
        sayTexmacs$Lisp s

    coerceL(expr : E) : S ==
        s : S := postcondition formatExpr(precondition expr, minPrec)
        sayExpr "scheme: (with _"mode_" _"math_""
        sayExpr s
        sayExpr ")"
        s

    display(texmacs : S) : Void ==
        sayExpr "scheme: (with _"mode_" _"math_""
        sayExpr texmacs
        sayExpr ")"
        void()$Void

    ungroup(str : S) : S ==
        -- not really correct, but should not matter
        str

    postcondition(str : S) : S ==
--      str := ungroup str
      len : I := #str
      plusminus : S := "_"+_" (concat _"-_""
      pos : I := position(plusminus, str, 1)
      if pos > 0 then
        ustart : US := segment(1, pos-1)$US
        uend : US := segment(pos+15, len)$US
        str := concat [str.ustart,"(concat _"-_"",str.uend]
        if pos < len-13 then
          str := postcondition(str)
      str



    stringify expr == (mathObject2String$Lisp expr)@S

    optionalWrap(s : S, expr : E, prec : I) : S ==
        tmp : S := formatExpr(expr, prec)
        tmp = "" or tmp = " " => ""
        concat ["(", s, " ", tmp, ")"]

    group str ==
      concat ["(concat ",str,")"]

    cork(x) ==
      for i in Cork repeat
        if i.unicode = x then return i.corkcode
      ucodeToString(x::Integer)

    utf2cork str ==
      concat [cork i for i in uentries str]

    addBraces str ==
      concat [" _"{_" ",str," _"}_" "]

    addBrackets str ==
      concat [" _"[_" ",str," _"]_" "]

    parenthesize str ==
      concat [" _"(_" ",str," _")_" "]

    precondition expr ==
      outputTran$Lisp expr

    formatSpecial(op : Sy, args : L E, prec : I) : S ==
        arg : E
        prescript : Boolean := false
        op = 'theMap => "(concat _"theMap(...)_")"
        op = 'AGGLST =>
            formatNary(","::Sy, "", 0, args, prec)
        op = 'AGGSET =>
            formatNary(";"::Sy, "", 0, args, prec)
        op = 'TAG =>
            group concat [formatExpr(first args, prec),
                          " _"<rightarrow>_" ",
                            formatExpr(second args, prec)]
                         --RightArrow
        op = 'SLASH =>
            group concat [formatExpr(first args, prec),
                          " _"/_" ", formatExpr(second args, prec)]
)if false
        op = 'VCONCAT =>
            group concat("<mtable><mtr>",
                     concat(concat([concat("<mtd>",concat(formatExpr(u, minPrec),"</mtd>"))
                                    for u in args]::L S),
                            "</mtr></mtable>"))
)endif
        op = 'CONCATB =>
            --formatNary('STRSEP, "(space _"1quad_")", 0, args, prec)
            formatNary('STRSEP, " ", 0, args, prec)
        op = 'CONCAT =>
            formatNary('STRSEP, "", 0, args, minPrec)
        op = 'QUOTE =>
            group concat("'", formatExpr(first args, minPrec))
        op = 'BRACKET =>
            group addBrackets ungroup formatExpr(first args, minPrec)
        op = 'BRACE =>
            group addBraces ungroup formatExpr(first args, minPrec)
        op = 'PAREN =>
            group parenthesize ungroup formatExpr(first args, minPrec)
        op = 'PRIME =>
            formatSpecial('SUPERSUB, [first args, " "::E, second(args)], prec)
        op = 'OVERBAR =>
            null args => ""
            concat ["(wide ", formatExpr(first args, minPrec), " _"<bar>_")"]
            --OverBar
        op = 'ROOT =>
            null args => ""
            tmp : S := group formatExpr(first args, minPrec)
            null rest args => concat ["(sqrt ", tmp, ")"]
            concat ["(sqrt ", tmp, " ", formatExpr(first rest args, minPrec),
                    ")"]
        op = 'SEGMENT =>
            tmp : S := concat [formatExpr(first args, minPrec), " _".._" "]
            group
                null rest args =>  tmp
                concat [tmp, formatExpr(first rest args, minPrec)]
        op = 'SUB =>
            group concat ["(concat ", formatExpr(first args, minPrec),
                 "(rsub ", formatSpecial('AGGLST, rest args, minPrec), "))"]
        op = 'SUPERSUB =>
            base : S := formatExpr(first args, minPrec)
            args := rest args
            #args > 4 => error "multiscript object has more than 4 scripts"
            if not(null(args)) then
                base := concat [base, " ",
                                optionalWrap("rsub", args(1), minPrec)]
                args := rest args
            if not(null(args)) then
                base := concat [base, " ",
                                optionalWrap("rsup", args(1), minPrec)]
                args := rest args
            if not(null(args)) then
                base := concat [optionalWrap("lsup", args(1), minPrec),
                                " ", base]
                args := rest args
            if not(null(args)) then
                base := concat [optionalWrap("lsub", args(1), minPrec),
                                " ", base]
            concat ["(concat ", base, ")"]
        op = 'SC =>
            null args => ""
            tmp := formatNaryNoGroup('STRSEP, ")) (row (cell ",
                                     0, args, minPrec)
            concat ["(tabular (tformat (twith _"table-valign_" _"t_") (table (row (cell ", tmp, ")))))"]
        op = 'MATRIX => formatMatrix rest args
)if false
        op = 'BOX =>
            null args => ""
            tmp := formatNaryNoGroup("",args,minPrec)
            group concat ["<mtable frame=_"solid_"><mtr><mtd>",tmp,"</mtd></mtr></mtable>"]
        op = 'EQUATNUM =>
            concat ["<mtable><mtr><mtd>",formatExpr(args.1,minPrec),"</mtd><mtd style=_"padding-left: 50px;_">",formatExpr(args.2,minPrec),"</mtd></mtr></mtable>"]
)endif
        op = 'BINOMIAL =>
            -- binomial('f: OutputForm, 'z: OutputForm) produces
            -- {{BINOMIAL}{f}{z}}
            concat ["(binom ", formatExpr(args.1,minPrec), " ", formatExpr(args.2,minPrec), ")"]
        op = 'NOTHING => "_"_""
)if false
        -- this is the output from continuedFraction(314159/100000)
        -- {{+}{3}{{ZAG}{1}{7}}{{ZAG}{1}{15}}{{ZAG}{1}{1}}{{ZAG}{1}{25}}{{ZAG}{1}{1}}{{ZAG}{1}{7}}{{ZAG}{1}{4}}}
        -- to format continued fraction traditionally need to intercept it at the
        -- formatNary of the "+"
        --  concat [" \zag{",formatExpr(first args, minPrec),"}{",
        --    formatExpr(first rest args,minPrec),"}"]
        op = 'ZAG =>
            concat ["<mtable><mtr><mtd style=_"border-right: solid 1px black;
              border-bottom: solid 1px black; padding-right: 2px; padding-left: 2px;_">",formatExpr(first args, minPrec),
                "</mtd></mtr><mtr><mtd style=_"border-left: solid 1px black; padding-left: 2px; padding-right: 2px;_">",
                   formatExpr(first rest args,minPrec),"</mtd></mtr></mtable>"]
)endif
        concat ["(concat _"not done yet for: ", string(op),"_")"]

)if false
    formatSuperSub(expr : E, args : L E, opPrec : I) : S ==
      s : S := "(concat _""funcS"_" (rprime _""
      while j < i repeat
        s := s"'"
        j := j + 1
      s := s"_") _"(_" "formatExpr(first args,minPrec)" _")_")"
)endif

    formatPlex(op : Sy, args : L E, prec : I) : S ==
        p : I := position(op, plexOps)
        p < 1 => error "unknown plex op"
        opPrec := plexPrecs.p
        n : I := #args
        (n ~= 2) and (n ~= 3) => error "wrong number of arguments for plex"
        ops : S :=
            op = 'SIGMA =>
                -- sum(a::OutputForm, b::OutputForm) produces
                -- (SIGMA b a)
                n = 2 => "<sum>"
                error "wrong number of arguments for plex"
            op = 'SIGMA2 =>
                -- sum(a::OutputForm, b::OutputForm, c::OutputForm) produces
                -- (SIGMA2 b c a)
                n = 3 => "<sum>"
                error "wrong number of arguments for plex"
            op = 'PI =>
                -- prod(a::OutputForm, b::OutputForm) produces
                -- (PI b a)
                n = 2 =>  "<prod>"
                error "wrong number of arguments for plex"
            op = 'PI2 =>
                -- prod(a::OutputForm, b::OutputForm, c::OutputForm) produces
                -- (PI2 b c a)
                n = 3 => "<prod>"
                error "wrong number of arguments for plex"
            op = 'INTSIGN =>
                -- int(a::OutputForm) produces
                -- (INTSIGN NOTHING NOTHING a)
                -- int(a::OutputForm, b::OutputForm) produces
                -- (INTSIGN b NOTHING a)
                -- int(a::OutputForm, b::OutputForm, c::OutputForm) produces
                -- (INTSIGN b c a)
                n = 3 => "<int>"
                error "wrong number of arguments for plex"
            error "Unexpected plex op:" string(op)
        body :=
            op = 'INTSIGN =>
                concat(formatIntBody(args(3), minPrec), " (big _"._")")
            formatExpr(args(n), opPrec)
        t2 : S :=
            n = 3 => concat [" (rsup ", formatExpr(args.2,minPrec),")"]
            ""
        t1 := formatExpr(args(1), minPrec)
        s := concat ["(big-around _"", ops, "_" (concat (rsub ", t1,
                     ")", t2, " ", body, "))"]
        if opPrec < prec then s := parenthesize s
        s


    formatIntBody(body : E, opPrec : I) : S ==
        -- the original OutputForm expression looks something like this:
        -- {{INTSIGN}{NOTHING or lower limit?}
        -- {bvar or upper limit?}{{*}{integrand}{{CONCAT}{d}{axiom var}}}}
        -- the args list passed here consists of the rest of this list, i.e.
        -- starting at the NOTHING or ...
        if has_op?(body, "*"::Sy) then
            bodyL := arguments(body)
            if #bodyL = 2 and has_op?(bvar := bodyL(2), 'CONCAT) then
                bvarL := arguments(bvar)
                if #bvarL = 2 and is_symbol?(bvarL(1), 'd) then
                    bvarS : S := stringify (bvarL(2))
                    return concat ["(concat ", formatExpr(bodyL(1), opPrec),
                                   " _"*<mathd>", bvarS, "_")"]
        formatExpr(body, opPrec)

    formatMatrix(args : L E) : S ==
        -- format for args is [[ROW ...], [ROW ...], [ROW ...]]
        -- generate string for formatting columns (centered)
        group concat
            ["(matrix (tformat (table (row (cell ",
              formatNaryNoGroup('STRSEP, ")) (row (cell ", 0, args, minPrec),
                ")))))"]

    formatFunction(op : E, args : L E, prec : I) : S ==
        ops := formatExpr(op, minPrec)
        group concat [ops, " ", parenthesize
                      formatNary(","::Sy, "", 0, args, minPrec)]

    formatNullary(op : Sy) ==
        op = 'NOTHING => "_"_""
        group concat ["_"", string(op), "()_""]

    formatUnary(op : Sy, arg : E, prec : I) ==
        p : I := position(op, unaryOps)
        p < 1 => error "unknown unary op"
        opPrec := unaryPrecs.p
        s : S := concat ["(concat _"", string(op), "_" ",
                         formatExpr(arg, opPrec), ")"]
        opPrec < prec => group parenthesize s
        op = "-"::Sy => s
        group s

    formatBinary(op : Sy, args : L E, prec : I) : S ==
        p : I := position(op, binaryOps)
        p < 1 => error "unknown binary op"
        opPrec := binaryPrecs.p
        s1 := formatExpr(first args, opPrec)
        s2 := formatExpr(first rest args, opPrec)
        s : S :=
            op = "^"::Sy    => concat ["(concat " s1 "(rsup " s2 "))"]
            op = "/"::Sy     => concat ["(frac ",s1," ",s2,")"]
            op = 'OVER  => concat ["(frac ",s1," ",s2,")"]
            ops : S :=
                op = "~="::Sy => "<ne>"
                op = "<"::Sy => "<less>"
                op = "<="::Sy => "<leq>"
                op = ">"::Sy => "<gtr>"
                op = ">="::Sy => "<geq>"
                op = "+->"::Sy => "<mapsto>"
                -- FIXME how to do this properly ???
                op = 'LET   => ":="
                string(op)
            concat ["(concat ", s1, " _"", ops, "_" ", s2, ")"]
        group
            op = "/"::Sy or op = 'OVER => s
            opPrec < prec => parenthesize s
            s

    formatNary(op : Sy, sep : S, opprec : I, args : L E, prec : I) : S ==
        group formatNaryNoGroup(op, sep, opprec, args, prec)

    formatNaryNoGroup(op : Sy, sep : S, opprec : I, args : L E, prec : I) : S ==
        null args => ""
        p : I := position(op, naryOps)
        p < 1 => error "unknown nary op"
        -- need to test for "ZAG" case and divert it here
        -- ex 1. continuedFraction(314159/100000)
        -- {{+}{3}{{ZAG}{1}{7}}{{ZAG}{1}{15}}{{ZAG}{1}{1}}{{ZAG}{1}{25}}
        -- {{ZAG}{1}{1}}{{ZAG}{1}{7}}{{ZAG}{1}{4}}}
        -- this is the preconditioned output form
        -- including "op", the args list would be the rest of this
        -- i.e op = '+' and args = {{3}{{ZAG}{1}{7}}{{ZAG}{1}{15}}
        -- {{ZAG}{1}{1}}{{ZAG}{1}{25}}{{ZAG}{1}{1}}{{ZAG}{1}{7}}{{ZAG}{1}{4}}}
        -- ex 2. continuedFraction(14159/100000)
        -- this one doesn't have the leading integer
        -- {{+}{{ZAG}{1}{7}}{{ZAG}{1}{15}}{{ZAG}{1}{1}}{{ZAG}{1}{25}}
        -- {{ZAG}{1}{1}}{{ZAG}{1}{7}}{{ZAG}{1}{4}}}
        --
        -- ex 3. continuedFraction(3, repeating [1], repeating [3, 6])
        -- {{+}{3}{{ZAG}{1}{3}}{{ZAG}{1}{6}}{{ZAG}{1}{3}}{{ZAG}{1}{6}}
        -- {{ZAG}{1}{3}}{{ZAG}{1}{6}}{{ZAG}{1}{3}}{{ZAG}{1}{6}}
        -- {{ZAG}{1}{3}}{{ZAG}{1}{6}}{...}}
        -- In each of these examples the args list consists of the terms
        -- following the '+' op
        -- so the first arg could be a "ZAG" or something
        -- else, but the second arg looks like it has to be "ZAG", so maybe
        -- test for #args > 1 and args.2 contains "ZAG".
        -- Note that since the resulting MathML <mfrac>s are nested we need
        -- to handle the whole continued fraction at once, i.e. we can't
        -- just look for, e.g., {{ZAG}{1}{6}}
        (#args > 1) and has_op?(args(2), 'ZAG) =>
            op ~= "+"::Sy => error "ZAG in unexpected place"
            has_op?(args(1), 'ZAG) => formatZag(args)
            concat [formatExpr(first args, minPrec), " _"+_" ",
                    formatZag(rest args)]
        ops : S :=
            op = 'STRSEP => sep
            op = 'ROW   => ") (cell "
            op = 'TENSOR => " _"<otimes>_" "
            concat [" _"", string(op), "_" "]
        l : L S := nil
        opPrec :=
            op = 'STRSEP => opprec
            naryPrecs.p
        for a in args repeat
            l := concat(ops, concat(formatExpr(a, opPrec), l)$L(S))$L(S)
        s : S := concat reverse rest l
        opPrec < prec => parenthesize s
        s

    formatZag(args : L E) : S ==
      -- args will be a list of things like this {{ZAG}{1}{7}}, the ZAG
      -- must be there, the '1' and '7' could conceivably be more complex
      -- expressions
      is_symbol?(first args, "..."::Symbol) => "<ldots>"
      not(has_op?(first args, 'ZAG)) =>
          op : S := stringify first args
           error "formatZag: Last argument in ZAG construct "
                 "has unknown operator: " op
      tmpZag : L E := arguments(first args)
      #args > 1 => "(frac " formatExpr(first tmpZag, minPrec) "(concat "
                    formatExpr(first rest tmpZag, minPrec) " _"+_" "
                        formatZag(rest args) "))"
      "(frac " formatExpr(first tmpZag, minPrec)
          formatExpr(first rest tmpZag, minPrec) ")"

    formatExpr(expr : E, prec : I) : S ==
      i, len : Integer
      intSplitLen : Integer := 20
      atom?(expr) =>
        str := stringify expr
        len := #str
        -- this bit seems to deal with integers
        integer?(expr) =>
          i := integer(expr)
          if (i < 0) or (i > 9)
            then
              group
                 nstr : String := ""
                 -- insert some blanks into the string, if too long
                 while ((len := #str) > intSplitLen) repeat
                   nstr := concat [nstr, " ",
                     elt(str, segment(1, intSplitLen)$US)]
                   str := elt(str, segment(intSplitLen + 1)$US)
                 empty? nstr => concat [" _"", str, "_" "]
                 nstr :=
                   empty? str => nstr
                   concat [nstr, " ", str]
                 concat [elt(nstr, segment(2)$US)]
            else concat [" _"", str, "_" "]
        str = "%pi" => "<pi>"
        -- pi
        str = "%e"  => "e"
        -- ExponentialE
        str = "%i"  => "i"
        -- ImaginaryI
        len > 0 and str.1 = char "%" => concat [" _"", str, "_" "]
        -- presumably this is a literal string
        -- WSP: preserve "..." and encode <less> symbols
        len > 0 and str.1 = char "_"" =>
          --concat ["(concat ", str, ")"]
          concat ["(text (concat ", "_"_\_"_" ",concat ["(math ",utf2cork str, ")"], " _"_\_"_") )"]
        len = 1 and str.1 = char " " => " "
        if symbol?(expr) then
            op := symbol(expr)
            (i := position(op, specialStrings)) > 0 =>
                specialStringsInMML.i
        (i := position(char " ", str)) > 0 =>
          -- We want to preserve spacing, so use a roman font.
          concat [" _"", str, "_" "]
        -- if we get to here does that mean it's a variable?
        group utf2cork concat [" _"", str, "_" "]
      opf : E := operator(expr)
      args : L E := arguments(expr)
      nargs : I := #args

      symbol?(opf) =>
          op := symbol(opf)
          -- special cases
          member?(op, specialOps) => formatSpecial(op, args, prec)
          member?(op, plexOps)    => formatPlex(op, args, prec)

          -- nullary case
          0 = nargs => formatNullary op

          -- unary case
          (1 = nargs) and member?(op, unaryOps) =>
            formatUnary(op, first args, prec)

          -- binary case
          (2 = nargs) and member?(op, binaryOps) =>
            formatBinary(op, args, prec)

          -- nary case
          member?(op, naryNGOps) => formatNaryNoGroup(op, "", 0, args, prec)
          member?(op, naryOps) => formatNary(op, "", 0, args, prec)
          formatFunction(opf, args, prec)
      formatFunction(opf, args, prec)

@

\section{License}
<<license>>=
--Copyright (c) 1991-2002, The Numerical ALgorithms Group Ltd.
--All rights reserved.
--
--Redistribution and use in source and binary forms, with or without
--modification, are permitted provided that the following conditions are
--met:
--
--    - Redistributions of source code must retain the above copyright
--      notice, this list of conditions and the following disclaimer.
--
--    - Redistributions in binary form must reproduce the above copyright
--      notice, this list of conditions and the following disclaimer in
--      the documentation and/or other materials provided with the
--      distribution.
--
--    - Neither the name of The Numerical ALgorithms Group Ltd. nor the
--      names of its contributors may be used to endorse or promote products
--      derived from this software without specific prior written permission.
--
--THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
--IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
--TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
--PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
--OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
--EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
--PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
--PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
--LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
--NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
--SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
@

<<*>>=
<<license>>
<<package TMFORM TexmacsFormat>>
@
\eject
\end{document}
