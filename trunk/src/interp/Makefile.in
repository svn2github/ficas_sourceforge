
subdir = src/interp/

DOC=$(axiom_target_docdir)/src/interp

# Command to translate Boot to Common Lisp
BOOT_TO_LISP = \
	$(axiom_build_document) --tag=boot --mode=translate \
		--use=$(BOOTSYS) --output=$@ $<

# Command to translate Common Lisp to native object code
COMPILE_LISP = \
	$(axiom_build_document) --tag=lisp --mode=compile \
		--output=$@ --use=$(DEPSYS) $<
AUTO=$(axiom_targetdir)/autoload

BOOTSYS= $(axiom_build_bindir)/bootsys    

DEPSYS=	$(axiom_build_bindir)/depsys

DEP=	vmlisp.lisp	ggreater.lisp	\
	hash.lisp	bootfuns.lisp	\
	union.lisp	nlib.lisp	\
	macros.lisp	comp.lisp	\
	spaderror.lisp	debug.lisp	\
	spad.lisp	bits.lisp	\
	setq.lisp	property.lisp	\
	foam_l.lisp      \
	axext_l.lisp

LOADSYS= $(axiom_build_bindir)/lisp$(EXEEXT)
SAVESYS= $(axiom_build_bindir)/interpsys$(EXEEXT)
AXIOMSYS= $(axiom_target_bindir)/AXIOMsys$(EXEEXT)

OBJ_files= vmlisp hash bootfuns macros setq astr bits \
	alql buildom cattable cformat cfuns clam clammed \
	comp compat compress cparse cstream database \
	debug dq fname format g-boot g-cndata g-error g-opt \
	g-timer	g-util ggreater hypertex i-analy \
	i-code i-coerce	i-coerfn i-eval i-funsel i-intern \
	i-map i-output i-resolv	i-spec1 i-spec2 i-syscmd \
	i-toplev i-util incl int-top lisplib macex match \
	monitor msg msgdb newaux newfort nlib nrunfast \
	nrungo nrunopt osyscmd packtran pathname pf2sex pile \
	posit property ptrees ptrop record rulesets scan \
	serror server setvars sfsfun-l sfsfun simpbool slam \
	sockio spad spaderror template termrw trace \
	union daase fortcall

OBJS= $(patsubst %, %.$(LISPOBJEXT), $(OBJ_files))

INOBJ_files= varini parini setvart interop patches

INOBJS= $(patsubst %, %.$(LISPOBJEXT), $(INOBJ_files))

# These are autloaded old parser files
OPOBJ_files= parsing bootlex def fnewmeta metalex \
	metameta parse postpar preparse

OPOBJS= $(patsubst %, ${AUTO}/%.$(LISPOBJEXT), $(OPOBJ_files))

OCOBJ_files= apply c-doc c-util profile category compiler \
	define functor info iterator modemap nruncomp \
	package	htcheck

OCOBJS= $(patsubst %, ${AUTO}/%.$(LISPOBJEXT), $(OCOBJ_files))

BROBJ_files= bc-matrix bc-misc bc-solve bc-util ht-util htsetvar \
	ht-root br-con br-data showimp br-op1 br-op2 \
	br-search br-util topics br-prof br-saturn

BROBJS= $(patsubst %, ${AUTO}/%.$(LISPOBJEXT), $(BROBJ_files))

TRANOBJ_files= wi1 wi2 pspad1 pspad2 mark nspadaux def

TRANOBJS= $(patsubst %, ${AUTO}/%.$(LISPOBJEXT), $(TRANOBJ_files))

ASCOMP_files= hashcode as foam_l axext_l

ASCOMP= $(patsubst %, %.$(LISPOBJEXT), $(ASCOMP_files))

ASAUTO= ${AUTO}/ax.$(LISPOBJEXT)

TIMESTAMP=$(axiom_targetdir)/timestamp
YEARWEEK=(progn (setq timestamp "${TIMESTAMP}") (setq boot::*build-version* "${VERSION}") (yearweek))


.PRECIOUS:	${DEPSYS}
.PRECIOUS:	${SAVESYS}
.PRECIOUS:	${AXIOMSYS}

PROCLAIMS=(progn (load "sys-pkg.lisp") (load "$(srcdir)/interp-proclaims.lisp"))

.SUFFIXES:
.SUFFIXES: .boot .clisp .lisp .pamphlet

.PHONY: all all-ax all-depsys all-interpsys all-axiomsys

all: all-ax

all-ax: stamp
	@echo finished $(srcdir)

stamp:  $(AUTO) remove-stamp build-images
	$(STAMP) stamp

.PHONY: remove-stamp
remove-stamp:
	-rm -f stamp

.PHONY: build-images
build-images: remove-stamp all-interpsys

all-interpsys: all-depsys 
	$(mkinstalldirs) $(AUTO)
	$(MAKE) $(SAVESYS)

all-axiomsys: all-depsys 
	$(MAKE) $(AXIOMSYS)

all-depsys: $(DEPSYS)

clean:
	@echo 619 cleaning $(builddir)

.PRECIOUS: %.clisp
%.clisp: $(srcdir)/%.boot
	$(BOOT_TO_LISP)

.PRECIOUS: %.$(LISPOBJEXT)
%.$(LISPOBJEXT): %.clisp
	$(COMPILE_LISP)

# Extract and compile the part of the interpreter written
# in Common Lisp
.PRECIOUS: %.lisp
%.$(LISPOBJEXT): %.lisp
	$(COMPILE_LISP)

$(DEP) sys-pkg.lisp nocompil.lisp util.lisp parsing.lisp metalex.lisp \
  bootlex.lisp preparse.lisp def.lisp metameta.lisp fnewmeta.lisp \
  cfuns.lisp fname.lisp monitor.lisp sfsfun-l.lisp sockio.lisp \
  daase.lisp patches.lisp nspadaux.lisp : %.lisp: $(srcdir)/%.lisp
	cp $< $@

mostlyclean-local:
	rm -f *.fn *.data *.o

clean-local: mostlyclean-local
	rm -f *.clisp *.lsp *.boot
	rm -f \
	axext_l.lisp   def.lisp       metalex.lisp   parsing.lisp \
	spad.lisp      bits.lisp      fname.lisp     metameta.lisp \
	patches.lisp   sys-pkg.lisp   fnewmeta.lisp \
	monitor.lisp   preparse.lisp  union.lisp     bootfuns.lisp \
	foam_l.lisp    proclaims.lisp \
	bootlex.lisp   ggreater.lisp  newaux.lisp    property.lisp \
	util.lisp      cfuns.lisp     hash.lisp      nlib.lisp \
	setq.lisp      vmlisp.lisp    comp.lisp      \
	nocompil.lisp  sfsfun-l.lisp  daase.lisp     macros.lisp \
	nspadaux.lisp  sockio.lisp    debug.lisp     makedep.lisp \
	spaderror.lisp

distclean-local: clean-local

${SAVESYS} ${AXIOMSYS}: makeint.lisp \
    ${DEPSYS} ${OBJS}  util.$(LISPOBJEXT) \
    nocompil.lisp sys-pkg.lisp \
    ${OCOBJS} ${OPOBJS} ${BROBJS} \
    database.date ${INOBJS} ${ASCOMP} ${ASAUTO} \
    ${NAGBROBJS} ${TRANOBJS} ${AUTO}/ffi-func.$(LISPOBJEXT) \
    ${LOADSYS} \
    $(axiom_targetdir)/algebra/exposed.$(FASLEXT) \
    $(axiom_src_datadir)/doc/msgs/s2-us.msgs \
    ${AUTO}/ffi-func2.lisp \
    $(srcdir)/../algebra/warm.data

makeint.lisp:
	@ echo 5 invoking make in `pwd` with parms:
	@ echo LSP= ${LSP} 
	@ echo PART= ${PART} 
	@ echo SRC= $(axiom_src_srcdir) 
	@ echo LISP=${LISP} BYE=${BYE}
	$(mkinstalldirs) $(axiom_target_datadir)/msgs
	$(INSTALL_DATA) $(axiom_src_datadir)/doc/msgs/s2-us.msgs \
		 $(axiom_target_datadir)/msgs
	@ echo '${PROCLAIMS}' > makeint.lisp
	@ echo '(load "nocompil.lisp")' >> makeint.lisp
	echo '(load #-:ecl "util" #+:ecl "util.lisp")' >> makeint.lisp
	@ echo '(in-package "BOOT")' >> makeint.lisp
	@ touch ${TIMESTAMP}
	@ echo '${YEARWEEK}' >> makeint.lisp
	echo '(build-interpsys' \
	  '(quote ($(patsubst %, "%", ${OBJS} ${ASCOMP} ${INOBJS} )))' \
	  '(quote ($(patsubst %, "$(BASE)%", ${OPOBJS})))' \
	  '(quote ($(patsubst %, "$(BASE)%", ${OCOBJS})))' \
	  '(quote ($(patsubst %, "$(BASE)%", ${BROBJS})))' \
	  '(quote ($(patsubst %, "$(BASE)%", ${TRANOBJS})))' \
	  '(quote ())' \
	  '(quote ($(patsubst %, "$(BASE)%", ${ASAUTO})))' \
	  '"${AXIOM}")' >> makeint.lisp
	@ echo '(in-package "BOOT")' >> makeint.lisp
	echo '#-:ecl(load "$(srcdir)/../algebra/warm.data")' >> makeint.lisp
	echo '#-:ecl(|clearClams|)' >> makeint.lisp
	@ echo '#+:akcl (setq compiler::*suppress-compiler-notes* t)' >> makeint.lisp
	@ echo '#+:akcl (si::gbc-time 0)' >> makeint.lisp

${SAVESYS}:
	echo '(load "makeint.lisp") #-:ecl(VMLISP::reclaim)' \
             '#-:ecl(setf BOOT::|$$createLocalLibDb| nil)' \
             '#+:ecl(AXIOM-LISP::make-program "$(BASE)$@" nil)' \
             '#-:ecl(BOOT::spad-save "$(BASE)$@" t)' | ${LOADSYS}

	@ echo 6 ${SAVESYS} created

depsys_boot_sources = postpar parse clam slam \
			g-boot g-util

${DEPSYS}:	${DEP} sys-pkg.lisp nocompil.lisp \
	        util.lisp \
	        parsing.lisp metalex.lisp \
	        bootlex.lisp newaux.lisp \
	        preparse.lisp \
	        def.lisp \
	        metameta.lisp fnewmeta.lisp \
	        $(patsubst %, %.clisp, ${depsys_boot_sources})
	@ echo 3 making ${DEPSYS} 
	$(mkinstalldirs) $(axiom_build_bindir)
	echo '${PROCLAIMS}' > makedep.lisp
	echo '(push :oldboot *features*)' >> makedep.lisp
	echo '(load "nocompil.lisp")' >> makedep.lisp
	echo '(load "util.lisp")' >> makedep.lisp
	echo '(in-package "BOOT")' >> makedep.lisp
	echo '(build-depsys (quote ($(patsubst %, "%", ${DEP}))) "${AXIOM}" "$(builddir)")' >> makedep.lisp
	echo > makedep2.lst
	for A in postpar.clisp parse.clisp parsing.lisp metalex.lisp \
	         bootlex.lisp newaux.lisp preparse.lisp def.lisp \
	         metameta.lisp fnewmeta.lisp clam.clisp slam.clisp \
	         g-boot.clisp g-util.clisp; do \
	   B=$${A%.*} ; \
	   echo '(load-maybe-compiling "'$$A'")' >> makedep.lisp ; \
	   echo $$B >> makedep2.lst ; \
	done
	for A in ${DEP} nocompil.lisp util.lisp; do \
	    echo '(axiom-compile-file "'$$A'")' >> makedep.lisp ; \
	done
	echo '#-:gcl(axiom-compile-file "sys-pkg.lisp")' >> makedep.lisp
	echo '(load "makedep.lisp")' | ${LOADSYS}
	echo '(in-package "AXIOM-LISP")' > makedep2.lisp
	echo '(make-program "$(BASE)$@" (quote (' >> makedep2.lisp
	echo '#+:gcl"sys-pkg.lisp" #-:gcl"sys-pkg.$(LISPOBJEXT)"' >> makedep2.lisp
	echo '#+:gcl"$(srcdir)/interp-proclaims.lisp"' >> makedep2.lisp
	for A in nocompil util \
                 $(patsubst %.lisp, %, ${DEP}) \
                 `cat makedep2.lst` ; do \
              echo '"'$$A'.$(LISPOBJEXT)"' >> makedep2.lisp ; \
        done
	echo ')))' >>  makedep2.lisp
	cat makedep2.lisp | ${LOADSYS}
	@ echo 4 ${DEPSYS} created
.PHONY: all-axiomsys

all-axiomsys: ${AXIOMSYS}

${AXIOMSYS}:
	echo '(load "makeint.lisp") #-:ecl(VMLISP::reclaim)' \
	   '#+:gcl(setf compiler::*default-system-p* nil)' \
	   '#+:gcl(compiler::emit-fn nil)' \
           '(setq *load-verbose* nil)' \
           '#+:clisp(setf custom:*suppress-check-redefinition* t)' \
	   '#+:ecl(AXIOM-LISP::make-program "$(BASE)$@" nil)' \
	   '#-:ecl(BOOT::spad-save "$(BASE)$@" t)' \
             | DAASE="$(BASE)$(axiom_targetdir)" ${LOADSYS}
	@ echo 6a ${AXIOMSYS} created
exposed.lsp: $(axiom_src_algdir)/exposed.lsp.pamphlet
	@ echo 615 making $@ from $<
	$(axiom_build_document) --tangle --output=$@ $<

$(axiom_targetdir)/algebra/exposed.$(FASLEXT) : exposed.lsp ${DEPSYS}
	@ echo 616 making $@ from exposed.lsp
	echo '(progn  (compile-file "exposed.lsp" :output-file' \
	      ' "$(BASE)$(axiom_targetdir)/algebra/exposed.$(FASLEXT)") (${BYE}))' \
		| ${DEPSYS} 

database.date:
	@ echo 617 the database was updated...remaking interpsys
	touch database.date



AUTO_from_IN=\
 apply bootlex def fnewmeta metalex metameta parsing preparse \
 c-util category \
 c-doc compiler profile define functor info iterator modemap \
 nruncomp package parse postpar bc-matrix bc-misc bc-solve \
 bc-util ht-util htsetvar ht-root htcheck ax br-con br-search \
 br-op1 br-op2 br-data br-util br-saturn topics br-prof nspadaux \
 showimp ffi-func

$(addprefix $(AUTO)/, $(addsuffix .$(LISPOBJEXT), $(AUTO_from_IN))): \
   $(AUTO)/%.$(LISPOBJEXT) : %.$(LISPOBJEXT)
	cp $< $@

IN_from_MID=\
 apply as ax bc-matrix bc-misc bc-solve bc-util br-con br-data \
 br-op1 br-op2 br-prof br-saturn br-search br-util buildom \
 category cattable c-doc clammed compat compiler compress c-util \
 database define format fortcall functor g-cndata g-error g-opt \
 g-timer hashcode htcheck ht-root htsetvar ht-util hypertex \
 i-analy i-code i-coerce i-coerfn i-eval i-funsel \
 i-intern interop i-map info i-output i-resolv i-spec1 i-spec2 \
 i-syscmd iterator i-toplev i-util lisplib match modemap msgdb \
 newfort \
 nruncomp nrunfast nrungo nrunopt package pathname \
 profile record rulesets server setvars setvart simpbool \
 template termrw topics trace

$(addsuffix .$(LISPOBJEXT), $(IN_from_MID)): \
    %.$(LISPOBJEXT) : %.clisp
	@ echo 10 making $@ from $<
	echo '(in-package "AXIOM-LISP")' \
	     '(progn  (axiom-compile-file "$<" :output-file "$@") (${BYE}))' \
	     | ${DEPSYS}

AUTO_from_MID=\
mark pspad1 pspad2 wi1 wi2

$(addprefix $(AUTO)/, $(addsuffix .$(LISPOBJEXT), $(AUTO_from_MID))): \
    $(AUTO)/%.$(LISPOBJEXT) : %.clisp
	@ echo 10 making $@ from $<
	echo '(in-package "AXIOM-LISP")' \
	     '(progn (axiom-compile-file "$<" :output-file "$(notdir $@)")' \
	     ' (${BYE}))' | ${DEPSYS}
	mv "$(notdir $@)" $@

MID_from_IN=\
 apply as ax bc-matrix bc-misc bc-solve bc-util br-con br-data \
 br-op1 br-op2 br-prof br-saturn br-search br-util buildom \
 category cattable c-doc clammed compat compiler compress c-util \
 database define format fortcall functor g-cndata g-error g-opt \
 g-timer hashcode htcheck ht-root htsetvar ht-util hypertex \
 i-analy i-code i-coerce i-coerfn i-eval i-funsel i-intern \
 interop i-map info i-output i-resolv i-spec1 i-spec2 i-syscmd \
 iterator i-toplev i-util lisplib mark match modemap msgdb \
 newfort nruncomp \
 nrunfast nrungo nrunopt package pathname profile pspad1 \
 pspad2 record rulesets server setvars setvart simpbool template \
 termrw topics trace wi1 wi2

$(addsuffix .clisp, $(MID_from_IN)): \
    %.clisp : $(srcdir)/%.boot
	@ echo 11 making $@ from $<
	echo '(progn (boottran::boottocl "$<" "$@") (${BYE}))' | ${DEPSYS}

ffi-func.$(LISPOBJEXT): ffi-func.lisp
	echo '(in-package "AXIOM-LISP")' \
	     '(axiom-compile-file "ffi-func.lisp" :output-file' \
              ' "ffi-func.$(LISPOBJEXT)") (${BYE})' | ${DEPSYS}

ffi-func.lisp: $(srcdir)/ffi-func.lisp
	cp $< $@

${AUTO}/ffi-func2.lisp: $(srcdir)/ffi-func2.lisp
	cp $< $@

newaux.$(LISPOBJEXT): newaux.lisp
	@ echo 79 making newaux.$(LISPOBJEXT) from newaux.lisp
	echo '(progn  (axiom-compile-file "newaux.lisp" :output-file ' \
             '"newaux.$(LISPOBJEXT)") (${BYE}))' | ${DEPSYS} 

newaux.lisp: $(srcdir)/newaux.lisp
	cp $< $@

